#include <interception_macros.h>

namespace app::methods::UnityEngine::Collider2D {
IL2CPP_REGISTER_METHOD(0x003F8A60, void, __ctor, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316CC90, float, get_density, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316CCE0, void, set_density, (Collider2D * __this, float value));
IL2CPP_REGISTER_METHOD(0x0316CD40, bool, get_isTrigger, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316CD90, void, set_isTrigger, (Collider2D * __this, bool value));
IL2CPP_REGISTER_METHOD(0x0316CDF0, bool, get_usedByEffector, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316CE40, void, set_usedByEffector, (Collider2D * __this, bool value));
IL2CPP_REGISTER_METHOD(0x0316CEA0, bool, get_usedByComposite, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316CEF0, void, set_usedByComposite, (Collider2D * __this, bool value));
IL2CPP_REGISTER_METHOD(0x0316CF50, CompositeCollider2D *, get_composite, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316CFA0, Vector2, get_offset, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D010, void, set_offset, (Collider2D * __this, Vector2 value));
IL2CPP_REGISTER_METHOD(0x0316D070, Rigidbody2D *, get_attachedRigidbody, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D0C0, int32_t, get_shapeCount, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D110, Bounds, get_bounds, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D1A0, ColliderErrorState2D__Enum, get_errorState, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D1F0, bool, get_compositeCapable, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D240, PhysicsMaterial2D *, get_sharedMaterial, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D290, void, set_sharedMaterial, (Collider2D * __this, PhysicsMaterial2D * value));
IL2CPP_REGISTER_METHOD(0x0316D2F0, float, get_friction, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D340, float, get_bounciness, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D390, bool, IsTouching, (Collider2D * __this, Collider2D * collider));
IL2CPP_REGISTER_METHOD(0x0316D3F0, bool, IsTouching, (Collider2D * __this, Collider2D * collider, ContactFilter2D contactFilter));
IL2CPP_REGISTER_METHOD(0x0316D480, bool, IsTouching_OtherColliderWithFilter, (Collider2D * __this, Collider2D * collider, ContactFilter2D contactFilter));
IL2CPP_REGISTER_METHOD(0x0316D4F0, bool, IsTouching, (Collider2D * __this, ContactFilter2D contactFilter));
IL2CPP_REGISTER_METHOD(0x0316D560, bool, IsTouching_AnyColliderWithFilter, (Collider2D * __this, ContactFilter2D contactFilter));
IL2CPP_REGISTER_METHOD(0x0316D5C0, bool, IsTouchingLayers, (Collider2D * __this));
IL2CPP_REGISTER_METHOD(0x0316D620, bool, IsTouchingLayers, (Collider2D * __this, int32_t layerMask));
IL2CPP_REGISTER_METHOD(0x0316D680, bool, OverlapPoint, (Collider2D * __this, Vector2 point));
IL2CPP_REGISTER_METHOD(0x0316D6E0, ColliderDistance2D, Distance, (Collider2D * __this, Collider2D * collider));
IL2CPP_REGISTER_METHOD(0x0316D7B0, int32_t, OverlapCollider, (Collider2D * __this, ContactFilter2D contactFilter, Collider2D__Array * results));
IL2CPP_REGISTER_METHOD(0x0316D830, int32_t, GetContacts, (Collider2D * __this, ContactPoint2D__Array * contacts));
IL2CPP_REGISTER_METHOD(0x0316D950, int32_t, GetContacts, (Collider2D * __this, ContactFilter2D contactFilter, ContactPoint2D__Array * contacts));
IL2CPP_REGISTER_METHOD(0x0316DA30, int32_t, GetContacts, (Collider2D * __this, Collider2D__Array * colliders));
IL2CPP_REGISTER_METHOD(0x0316DB50, int32_t, GetContacts, (Collider2D * __this, ContactFilter2D contactFilter, Collider2D__Array * colliders));
IL2CPP_REGISTER_METHOD(0x0316DC30, int32_t, Cast, (Collider2D * __this, Vector2 direction, RaycastHit2D__Array * results));
IL2CPP_REGISTER_METHOD(0x0316DE80, int32_t, Cast, (Collider2D * __this, Vector2 direction, RaycastHit2D__Array * results, float distance));
IL2CPP_REGISTER_METHOD(0x0316E0E0, int32_t, Cast, (Collider2D * __this, Vector2 direction, RaycastHit2D__Array * results, float distance, bool ignoreSiblingColliders));
IL2CPP_REGISTER_METHOD(0x0316E350, int32_t, Cast, (Collider2D * __this, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D__Array * results));
IL2CPP_REGISTER_METHOD(0x0316E3F0, int32_t, Cast, (Collider2D * __this, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D__Array * results, float distance));
IL2CPP_REGISTER_METHOD(0x0316E490, int32_t, Cast, (Collider2D * __this, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D__Array * results, float distance, bool ignoreSiblingColliders));
IL2CPP_REGISTER_METHOD(0x0316E540, int32_t, Cast_Internal, (Collider2D * __this, Vector2 direction, float distance, ContactFilter2D contactFilter, bool ignoreSiblingColliders, RaycastHit2D__Array * results));
IL2CPP_REGISTER_METHOD(0x0316E5E0, int32_t, Raycast, (Collider2D * __this, Vector2 direction, RaycastHit2D__Array * results));
IL2CPP_REGISTER_METHOD(0x0316E6C0, int32_t, Raycast, (Collider2D * __this, Vector2 direction, RaycastHit2D__Array * results, float distance));
IL2CPP_REGISTER_METHOD(0x0316E7B0, int32_t, Raycast, (Collider2D * __this, Vector2 direction, RaycastHit2D__Array * results, float distance, int32_t layerMask));
IL2CPP_REGISTER_METHOD(0x0316E8A0, int32_t, Raycast, (Collider2D * __this, Vector2 direction, RaycastHit2D__Array * results, float distance, int32_t layerMask, float minDepth));
IL2CPP_REGISTER_METHOD(0x0316E990, int32_t, Raycast, (Collider2D * __this, Vector2 direction, RaycastHit2D__Array * results, float distance, int32_t layerMask, float minDepth, float maxDepth));
IL2CPP_REGISTER_METHOD(0x0316EA80, int32_t, Raycast, (Collider2D * __this, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D__Array * results));
IL2CPP_REGISTER_METHOD(0x0316EB20, int32_t, Raycast, (Collider2D * __this, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D__Array * results, float distance));
IL2CPP_REGISTER_METHOD(0x0316EBC0, int32_t, Raycast_Internal, (Collider2D * __this, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D__Array * results));
IL2CPP_REGISTER_METHOD(0x0316EC50, void, get_offset_Injected, (Collider2D * __this, Vector2 * ret));
IL2CPP_REGISTER_METHOD(0x0316ECB0, void, set_offset_Injected, (Collider2D * __this, Vector2 * value));
IL2CPP_REGISTER_METHOD(0x0316ED10, void, get_bounds_Injected, (Collider2D * __this, Bounds * ret));
IL2CPP_REGISTER_METHOD(0x0316ED70, bool, IsTouching_OtherColliderWithFilter_Injected, (Collider2D * __this, Collider2D * collider, ContactFilter2D * contactFilter));
IL2CPP_REGISTER_METHOD(0x0316EDE0, bool, IsTouching_AnyColliderWithFilter_Injected, (Collider2D * __this, ContactFilter2D * contactFilter));
IL2CPP_REGISTER_METHOD(0x0316EE40, bool, OverlapPoint_Injected, (Collider2D * __this, Vector2 * point));
IL2CPP_REGISTER_METHOD(0x0316EEA0, int32_t, Cast_Internal_Injected, (Collider2D * __this, Vector2 * direction, float distance, ContactFilter2D * contactFilter, bool ignoreSiblingColliders, RaycastHit2D__Array * results));
IL2CPP_REGISTER_METHOD(0x0316EF30, int32_t, Raycast_Internal_Injected, (Collider2D * __this, Vector2 * direction, float distance, ContactFilter2D * contactFilter, RaycastHit2D__Array * results));
}
