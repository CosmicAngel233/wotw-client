#include <interception_macros.h>

namespace app::methods::System::Security::Cryptography::RSACryptoServiceProvider {
IL2CPP_REGISTER_METHOD(0x028E6670, String *, get_SignatureAlgorithm, (RSACryptoServiceProvider * __this));
IL2CPP_REGISTER_METHOD(0x028E66F0, bool, get_UseMachineKeyStore, ());
IL2CPP_REGISTER_METHOD(0x028E67A0, void, set_UseMachineKeyStore, (bool value));
IL2CPP_REGISTER_METHOD(0x028E6850, Byte__Array *, HashData, (RSACryptoServiceProvider * __this, Byte__Array * data, int32_t offset, int32_t count, HashAlgorithmName hashAlgorithm));
IL2CPP_REGISTER_METHOD(0x028E68B0, Byte__Array *, HashData, (RSACryptoServiceProvider * __this, Stream * data, HashAlgorithmName hashAlgorithm));
IL2CPP_REGISTER_METHOD(0x028E68F0, int32_t, GetAlgorithmId, (HashAlgorithmName hashAlgorithm));
IL2CPP_REGISTER_METHODINFO(0x04710DD8, RSACryptoServiceProvider_GetAlgorithmId__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E6B30, Byte__Array *, Encrypt, (RSACryptoServiceProvider * __this, Byte__Array * data, RSAEncryptionPadding * padding));
IL2CPP_REGISTER_METHODINFO(0x04708A00, RSACryptoServiceProvider_Encrypt__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E6D20, Byte__Array *, Decrypt, (RSACryptoServiceProvider * __this, Byte__Array * data, RSAEncryptionPadding * padding));
IL2CPP_REGISTER_METHODINFO(0x04716418, RSACryptoServiceProvider_Decrypt__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E6F10, Byte__Array *, SignHash, (RSACryptoServiceProvider * __this, Byte__Array * hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding * padding));
IL2CPP_REGISTER_METHODINFO(0x0474E4B8, RSACryptoServiceProvider_SignHash__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E71D0, bool, VerifyHash, (RSACryptoServiceProvider * __this, Byte__Array * hash, Byte__Array * signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding * padding));
IL2CPP_REGISTER_METHODINFO(0x047615D8, RSACryptoServiceProvider_VerifyHash__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E74E0, Exception *, PaddingModeNotSupported, ());
IL2CPP_REGISTER_METHOD(0x028E7640, void, __ctor, (RSACryptoServiceProvider * __this));
IL2CPP_REGISTER_METHOD(0x028E7660, void, __ctor, (RSACryptoServiceProvider * __this, CspParameters * parameters));
IL2CPP_REGISTER_METHOD(0x028E76B0, void, __ctor, (RSACryptoServiceProvider * __this, int32_t dwKeySize));
IL2CPP_REGISTER_METHOD(0x028E76C0, void, __ctor, (RSACryptoServiceProvider * __this, int32_t dwKeySize, CspParameters * parameters));
IL2CPP_REGISTER_METHOD(0x028E7710, void, Common, (RSACryptoServiceProvider * __this, int32_t dwKeySize, bool parameters));
IL2CPP_REGISTER_METHOD(0x028E7D60, void, Common, (RSACryptoServiceProvider * __this, CspParameters * p));
IL2CPP_REGISTER_METHODINFO(0x04723A30, RSACryptoServiceProvider_Common_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E7F60, void, Finalize, (RSACryptoServiceProvider * __this));
IL2CPP_REGISTER_METHOD(0x028E7FE0, String *, get_KeyExchangeAlgorithm, (RSACryptoServiceProvider * __this));
IL2CPP_REGISTER_METHOD(0x028E8060, int32_t, get_KeySize, (RSACryptoServiceProvider * __this));
IL2CPP_REGISTER_METHOD(0x004F4CE0, bool, get_PersistKeyInCsp, (RSACryptoServiceProvider * __this));
IL2CPP_REGISTER_METHOD(0x028E8090, void, set_PersistKeyInCsp, (RSACryptoServiceProvider * __this, bool value));
IL2CPP_REGISTER_METHOD(0x028E8120, bool, get_PublicOnly, (RSACryptoServiceProvider * __this));
IL2CPP_REGISTER_METHOD(0x028E8140, Byte__Array *, Decrypt, (RSACryptoServiceProvider * __this, Byte__Array * rgb, bool fOAEP));
IL2CPP_REGISTER_METHODINFO(0x047575C0, RSACryptoServiceProvider_Decrypt_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E85B0, Byte__Array *, DecryptValue, (RSACryptoServiceProvider * __this, Byte__Array * rgb));
IL2CPP_REGISTER_METHODINFO(0x04777B60, RSACryptoServiceProvider_DecryptValue__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E86A0, Byte__Array *, Encrypt, (RSACryptoServiceProvider * __this, Byte__Array * rgb, bool fOAEP));
IL2CPP_REGISTER_METHOD(0x01D61600, Byte__Array *, EncryptValue, (RSACryptoServiceProvider * __this, Byte__Array * rgb));
IL2CPP_REGISTER_METHOD(0x028E89D0, RSAParameters, ExportParameters, (RSACryptoServiceProvider * __this, bool includePrivateParameters));
IL2CPP_REGISTER_METHODINFO(0x0478A748, RSACryptoServiceProvider_ExportParameters__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E8BC0, void, ImportParameters, (RSACryptoServiceProvider * __this, RSAParameters parameters));
IL2CPP_REGISTER_METHOD(0x028E8C10, HashAlgorithm *, GetHash, (RSACryptoServiceProvider * __this, Object * halg));
IL2CPP_REGISTER_METHODINFO(0x0475BA70, RSACryptoServiceProvider_GetHash__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E8EC0, HashAlgorithm *, GetHashFromString, (RSACryptoServiceProvider * __this, String * name));
IL2CPP_REGISTER_METHODINFO(0x04741768, RSACryptoServiceProvider_GetHashFromString__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E8FD0, Byte__Array *, SignData, (RSACryptoServiceProvider * __this, Byte__Array * buffer, Object * halg));
IL2CPP_REGISTER_METHODINFO(0x04763990, RSACryptoServiceProvider_SignData__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E9170, Byte__Array *, SignData, (RSACryptoServiceProvider * __this, Stream * inputStream, Object * halg));
IL2CPP_REGISTER_METHOD(0x028E9260, Byte__Array *, SignData, (RSACryptoServiceProvider * __this, Byte__Array * buffer, int32_t offset, int32_t count, Object * halg));
IL2CPP_REGISTER_METHOD(0x028E9370, String *, GetHashNameFromOID, (RSACryptoServiceProvider * __this, String * oid));
IL2CPP_REGISTER_METHODINFO(0x0471EFB0, RSACryptoServiceProvider_GetHashNameFromOID__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E9570, Byte__Array *, SignHash, (RSACryptoServiceProvider * __this, Byte__Array * rgbHash, String * str));
IL2CPP_REGISTER_METHODINFO(0x04745680, RSACryptoServiceProvider_SignHash_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E9690, Byte__Array *, SignHash, (RSACryptoServiceProvider * __this, Byte__Array * rgbHash, int32_t calgHash));
IL2CPP_REGISTER_METHOD(0x028E9770, HashAlgorithm *, InternalHashToHashAlgorithm, (int32_t calgHash));
IL2CPP_REGISTER_METHODINFO(0x0474A008, RSACryptoServiceProvider_InternalHashToHashAlgorithm__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E98A0, bool, VerifyData, (RSACryptoServiceProvider * __this, Byte__Array * buffer, Object * halg, Byte__Array * signature));
IL2CPP_REGISTER_METHODINFO(0x04703758, RSACryptoServiceProvider_VerifyData__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E9A20, bool, VerifyHash, (RSACryptoServiceProvider * __this, Byte__Array * rgbHash, String * str, Byte__Array * rgbSignature));
IL2CPP_REGISTER_METHODINFO(0x04703D68, RSACryptoServiceProvider_VerifyHash_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E9B90, bool, VerifyHash, (RSACryptoServiceProvider * __this, Byte__Array * rgbHash, int32_t calgHash, Byte__Array * rgbSignature));
IL2CPP_REGISTER_METHOD(0x020D6E70, void, Dispose, (RSACryptoServiceProvider * __this, bool disposing));
IL2CPP_REGISTER_METHOD(0x028E9C90, void, OnKeyGenerated, (RSACryptoServiceProvider * __this, Object * sender, EventArgs * e));
IL2CPP_REGISTER_METHODINFO(0x04775640, RSACryptoServiceProvider_OnKeyGenerated__MethodInfo);
IL2CPP_REGISTER_METHOD(0x028E9D20, CspKeyContainerInfo *, get_CspKeyContainerInfo, (RSACryptoServiceProvider * __this));
IL2CPP_REGISTER_METHOD(0x028E9E90, Byte__Array *, ExportCspBlob, (RSACryptoServiceProvider * __this, bool includePrivateParameters));
IL2CPP_REGISTER_METHOD(0x028E9F20, void, ImportCspBlob, (RSACryptoServiceProvider * __this, Byte__Array * keyBlob));
IL2CPP_REGISTER_METHODINFO(0x0470FEC8, RSACryptoServiceProvider_ImportCspBlob__MethodInfo);
IL2CPP_REGISTER_METHOD(0x002FA000, void, __cctor, ());
}
