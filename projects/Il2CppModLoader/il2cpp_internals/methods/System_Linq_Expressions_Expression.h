#include <interception_macros.h>

namespace app::methods::System::Linq::Expressions::Expression {
IL2CPP_REGISTER_METHOD(0x029AE890, BinaryExpression *, Assign, (Expression * left, Expression * right));
IL2CPP_REGISTER_METHODINFO(0x0478E368, Expression_Assign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029AEBF0, BinaryExpression *, GetUserDefinedBinaryOperator, (ExpressionType__Enum binaryType, String * name, Expression * left, Expression * right, bool liftToNull));
IL2CPP_REGISTER_METHOD(0x029AF0E0, BinaryExpression *, GetMethodBasedBinaryOperator, (ExpressionType__Enum binaryType, Expression * left, Expression * right, MethodInfo_1 * method_1, bool liftToNull));
IL2CPP_REGISTER_METHODINFO(0x0477F280, Expression_GetMethodBasedBinaryOperator__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029AF880, BinaryExpression *, GetMethodBasedAssignOperator, (ExpressionType__Enum binaryType, Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion, bool liftToNull));
IL2CPP_REGISTER_METHODINFO(0x0478F7F8, Expression_GetMethodBasedAssignOperator__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029AFBF0, BinaryExpression *, GetUserDefinedBinaryOperatorOrThrow, (ExpressionType__Enum binaryType, String * name, Expression * left, Expression * right, bool liftToNull));
IL2CPP_REGISTER_METHODINFO(0x04787BD0, Expression_GetUserDefinedBinaryOperatorOrThrow__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029AFEC0, BinaryExpression *, GetUserDefinedAssignOperatorOrThrow, (ExpressionType__Enum binaryType, String * name, Expression * left, Expression * right, LambdaExpression * conversion, bool liftToNull));
IL2CPP_REGISTER_METHODINFO(0x047826A8, Expression_GetUserDefinedAssignOperatorOrThrow__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B0230, MethodInfo_1 *, GetUserDefinedBinaryOperator, (ExpressionType__Enum binaryType, Type * leftType, Type * rightType, String * name));
IL2CPP_REGISTER_METHOD(0x029B0520, bool, IsLiftingConditionalLogicalOperator, (Type * left, Type * right, MethodInfo_1 * method_1, ExpressionType__Enum binaryType));
IL2CPP_REGISTER_METHOD(0x029B05B0, bool, ParameterIsAssignable, (ParameterInfo_1 * pi, Type * argType));
IL2CPP_REGISTER_METHOD(0x029B0630, void, ValidateParamswithOperandsOrThrow, (Type * paramType, Type * operandType, ExpressionType__Enum exprType, String * name));
IL2CPP_REGISTER_METHODINFO(0x04740920, Expression_ValidateParamswithOperandsOrThrow__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B0720, void, ValidateOperator, (MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x0476A750, Expression_ValidateOperator__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B0880, void, ValidateMethodInfo, (MethodInfo_1 * method_1, String * paramName));
IL2CPP_REGISTER_METHODINFO(0x04707C78, Expression_ValidateMethodInfo__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B0960, bool, IsNullComparison, (Expression * left, Expression * right));
IL2CPP_REGISTER_METHOD(0x029B0AB0, bool, IsNullConstant, (Expression * e));
IL2CPP_REGISTER_METHOD(0x029B0B80, void, ValidateUserDefinedConditionalLogicOperator, (ExpressionType__Enum nodeType, Type * left, Type * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x04768388, Expression_ValidateUserDefinedConditionalLogicOperator__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B1390, void, VerifyOpTrueFalse, (ExpressionType__Enum nodeType, Type * left, MethodInfo_1 * opTrue, String * paramName));
IL2CPP_REGISTER_METHODINFO(0x0473F4D8, Expression_VerifyOpTrueFalse__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B1570, bool, IsValidLiftedConditionalLogicalOperator, (Type * left, Type * right, ParameterInfo_1__Array * pms));
IL2CPP_REGISTER_METHOD(0x029B1610, BinaryExpression *, MakeBinary, (ExpressionType__Enum binaryType, Expression * left, Expression * right, bool liftToNull, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B1700, BinaryExpression *, MakeBinary, (ExpressionType__Enum binaryType, Expression * left, Expression * right, bool liftToNull, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x0473B0C8, Expression_MakeBinary_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B2510, BinaryExpression *, Equal, (Expression * left, Expression * right));
IL2CPP_REGISTER_METHOD(0x029B25D0, BinaryExpression *, Equal, (Expression * left, Expression * right, bool liftToNull, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B2770, BinaryExpression *, ReferenceEqual, (Expression * left, Expression * right));
IL2CPP_REGISTER_METHODINFO(0x047866E0, Expression_ReferenceEqual__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B29A0, BinaryExpression *, NotEqual, (Expression * left, Expression * right));
IL2CPP_REGISTER_METHOD(0x029B2A60, BinaryExpression *, NotEqual, (Expression * left, Expression * right, bool liftToNull, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B2C00, BinaryExpression *, ReferenceNotEqual, (Expression * left, Expression * right));
IL2CPP_REGISTER_METHODINFO(0x047632A0, Expression_ReferenceNotEqual__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B2E30, BinaryExpression *, GetEqualityComparisonOperator, (ExpressionType__Enum binaryType, String * opName, Expression * left, Expression * right, bool liftToNull));
IL2CPP_REGISTER_METHODINFO(0x0477ABC0, Expression_GetEqualityComparisonOperator__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B3560, BinaryExpression *, GreaterThan, (Expression * left, Expression * right, bool liftToNull, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B3700, BinaryExpression *, LessThan, (Expression * left, Expression * right));
IL2CPP_REGISTER_METHOD(0x029B37C0, BinaryExpression *, LessThan, (Expression * left, Expression * right, bool liftToNull, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B3960, BinaryExpression *, GreaterThanOrEqual, (Expression * left, Expression * right, bool liftToNull, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B3B00, BinaryExpression *, LessThanOrEqual, (Expression * left, Expression * right, bool liftToNull, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B3CA0, BinaryExpression *, GetComparisonOperator, (ExpressionType__Enum binaryType, String * opName, Expression * left, Expression * right, bool liftToNull));
IL2CPP_REGISTER_METHOD(0x029B4020, BinaryExpression *, AndAlso, (Expression * left, Expression * right));
IL2CPP_REGISTER_METHOD(0x029B40D0, BinaryExpression *, AndAlso, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x04719A38, Expression_AndAlso_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B4920, BinaryExpression *, OrElse, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x04722328, Expression_OrElse__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B5190, BinaryExpression *, Coalesce, (Expression * left, Expression * right, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x04719DA8, Expression_Coalesce__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B58F0, Type *, ValidateCoalesceArgTypes, (Type * left, Type * right));
IL2CPP_REGISTER_METHODINFO(0x04794EC0, Expression_ValidateCoalesceArgTypes__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B5A60, BinaryExpression *, Add, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B5D80, BinaryExpression *, AddAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x0475E968, Expression_AddAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B6100, void, ValidateOpAssignConversionLambda, (LambdaExpression * conversion, Expression * left, MethodInfo_1 * method_1, ExpressionType__Enum nodeType));
IL2CPP_REGISTER_METHODINFO(0x04733BC8, Expression_ValidateOpAssignConversionLambda__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B63A0, BinaryExpression *, AddAssignChecked, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x0478D548, Expression_AddAssignChecked__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B6720, BinaryExpression *, AddChecked, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B6A40, BinaryExpression *, Subtract, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B6D60, BinaryExpression *, SubtractAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x04789B58, Expression_SubtractAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B70E0, BinaryExpression *, SubtractAssignChecked, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x04754500, Expression_SubtractAssignChecked__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B7460, BinaryExpression *, SubtractChecked, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B7780, BinaryExpression *, Divide, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B7AA0, BinaryExpression *, DivideAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x047028B0, Expression_DivideAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B7E20, BinaryExpression *, Modulo, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B8140, BinaryExpression *, ModuloAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x04788648, Expression_ModuloAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B84C0, BinaryExpression *, Multiply, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B87E0, BinaryExpression *, MultiplyAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x047649A0, Expression_MultiplyAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B8B60, BinaryExpression *, MultiplyAssignChecked, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x04789BD0, Expression_MultiplyAssignChecked__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B8EE0, BinaryExpression *, MultiplyChecked, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B9200, bool, IsSimpleShift, (Type * left, Type * right));
IL2CPP_REGISTER_METHOD(0x029B92E0, Type *, GetResultTypeOfShift, (Type * left, Type * right));
IL2CPP_REGISTER_METHOD(0x029B9460, BinaryExpression *, LeftShift, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B97B0, BinaryExpression *, LeftShiftAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x04754DC0, Expression_LeftShiftAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029B9B60, BinaryExpression *, RightShift, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029B9EB0, BinaryExpression *, RightShiftAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x0470D6A0, Expression_RightShiftAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BA260, BinaryExpression *, And, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029BA580, BinaryExpression *, AndAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x047216B0, Expression_AndAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BA900, BinaryExpression *, Or, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029BAC20, BinaryExpression *, OrAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x04775070, Expression_OrAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BAFA0, BinaryExpression *, ExclusiveOr, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029BB2C0, BinaryExpression *, ExclusiveOrAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x0473F318, Expression_ExclusiveOrAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BB640, BinaryExpression *, Power, (Expression * left, Expression * right, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x04707090, Expression_Power__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BB870, BinaryExpression *, PowerAssign, (Expression * left, Expression * right, MethodInfo_1 * method_1, LambdaExpression * conversion));
IL2CPP_REGISTER_METHODINFO(0x04713F50, Expression_PowerAssign__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BBAD0, BinaryExpression *, ArrayIndex, (Expression * array, Expression * index));
IL2CPP_REGISTER_METHODINFO(0x04718A30, Expression_ArrayIndex__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BBDA0, BlockExpression *, Block, (Expression * arg0, Expression * arg1));
IL2CPP_REGISTER_METHOD(0x029BBF20, BlockExpression *, Block, (Expression * arg0, Expression * arg1, Expression * arg2));
IL2CPP_REGISTER_METHOD(0x029BC0D0, BlockExpression *, Block, (Expression * arg0, Expression * arg1, Expression * arg2, Expression * arg3));
IL2CPP_REGISTER_METHOD(0x029BC2A0, BlockExpression *, Block, (Expression * arg0, Expression * arg1, Expression * arg2, Expression * arg3, Expression * arg4));
IL2CPP_REGISTER_METHOD(0x029BC490, BlockExpression *, Block, (IEnumerable_1_System_Linq_Expressions_Expression_ * expressions));
IL2CPP_REGISTER_METHOD(0x029BC570, BlockExpression *, Block, (Type * type, Expression__Array * expressions));
IL2CPP_REGISTER_METHOD(0x029BC630, BlockExpression *, Block, (Type * type, IEnumerable_1_System_Linq_Expressions_Expression_ * expressions));
IL2CPP_REGISTER_METHOD(0x029BC720, BlockExpression *, Block, (IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * variables, Expression__Array * expressions));
IL2CPP_REGISTER_METHOD(0x029BC7D0, BlockExpression *, Block, (Type * type, IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * variables, Expression__Array * expressions));
IL2CPP_REGISTER_METHOD(0x029BC890, BlockExpression *, Block, (IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * variables, IEnumerable_1_System_Linq_Expressions_Expression_ * expressions));
IL2CPP_REGISTER_METHOD(0x029BCA50, BlockExpression *, Block, (Type * type, IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * variables, IEnumerable_1_System_Linq_Expressions_Expression_ * expressions));
IL2CPP_REGISTER_METHOD(0x029BCD20, BlockExpression *, BlockCore, (Type * type, ReadOnlyCollection_1_System_Linq_Expressions_ParameterExpression_ * variables, ReadOnlyCollection_1_System_Linq_Expressions_Expression_ * expressions));
IL2CPP_REGISTER_METHODINFO(0x0472A2E0, Expression_BlockCore__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BD3A0, void, ValidateVariables, (ReadOnlyCollection_1_System_Linq_Expressions_ParameterExpression_ * varList, String * collectionName));
IL2CPP_REGISTER_METHODINFO(0x04773D38, Expression_ValidateVariables__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BD680, BlockExpression *, GetOptimizedBlockExpression, (IReadOnlyList_1_System_Linq_Expressions_Expression_ * expressions));
IL2CPP_REGISTER_METHOD(0x029BDE00, CatchBlock *, Catch, (ParameterExpression * variable, Expression * body));
IL2CPP_REGISTER_METHOD(0x029BDF00, CatchBlock *, MakeCatchBlock, (Type * type, ParameterExpression * variable, Expression * body, Expression * filter));
IL2CPP_REGISTER_METHODINFO(0x0474F228, Expression_MakeCatchBlock__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BE1D0, ConditionalExpression *, Condition, (Expression * test, Expression * ifTrue, Expression * ifFalse));
IL2CPP_REGISTER_METHODINFO(0x0472BAD8, Expression_Condition__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BE3D0, ConditionalExpression *, Condition, (Expression * test, Expression * ifTrue, Expression * ifFalse, Type * type));
IL2CPP_REGISTER_METHODINFO(0x047353F0, Expression_Condition_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BE620, ConditionalExpression *, IfThen, (Expression * test, Expression * ifTrue));
IL2CPP_REGISTER_METHOD(0x029BE730, ConditionalExpression *, IfThenElse, (Expression * test, Expression * ifTrue, Expression * ifFalse));
IL2CPP_REGISTER_METHOD(0x029BE840, ConstantExpression *, Constant, (Object * value));
IL2CPP_REGISTER_METHOD(0x029BE990, ConstantExpression *, Constant, (Object * value, Type * type));
IL2CPP_REGISTER_METHODINFO(0x04762A70, Expression_Constant_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BEE80, DefaultExpression *, Empty, ());
IL2CPP_REGISTER_METHOD(0x029BF000, DefaultExpression *, Default, (Type * type));
IL2CPP_REGISTER_METHOD(0x029BF180, ElementInit *, ElementInit, (MethodInfo_1 * addMethod, IEnumerable_1_System_Linq_Expressions_Expression_ * arguments));
IL2CPP_REGISTER_METHOD(0x029BF360, void, ValidateElementInitAddMethodInfo, (MethodInfo_1 * addMethod, String * paramName));
IL2CPP_REGISTER_METHODINFO(0x0474AAC8, Expression_ValidateElementInitAddMethodInfo__MethodInfo);
IL2CPP_REGISTER_METHOD(0x002FA000, void, __ctor, (Expression * __this));
IL2CPP_REGISTER_METHOD(0x029BF6D0, ExpressionType__Enum, get_NodeType, (Expression * __this));
IL2CPP_REGISTER_METHODINFO(0x0477F868, Expression_get_NodeType__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BF800, Type *, get_Type, (Expression * __this));
IL2CPP_REGISTER_METHODINFO(0x0477C448, Expression_get_Type__MethodInfo);
IL2CPP_REGISTER_METHOD(0x00417870, bool, get_CanReduce, (Expression * __this));
IL2CPP_REGISTER_METHOD(0x029BF930, Expression *, Reduce, (Expression * __this));
IL2CPP_REGISTER_METHODINFO(0x04762158, Expression_Reduce__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BF9E0, Expression *, VisitChildren, (Expression * __this, ExpressionVisitor * visitor));
IL2CPP_REGISTER_METHODINFO(0x047886A0, Expression_VisitChildren__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BFAC0, Expression *, Accept, (Expression * __this, ExpressionVisitor * visitor));
IL2CPP_REGISTER_METHOD(0x029BFAF0, Expression *, ReduceAndCheck, (Expression * __this));
IL2CPP_REGISTER_METHODINFO(0x0472F3A0, Expression_ReduceAndCheck__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029BFC30, String *, ToString, (Expression * __this));
IL2CPP_REGISTER_METHOD(0x029BFC40, String *, get_DebugView, (Expression * __this));
IL2CPP_REGISTER_METHOD(0x029BFEB0, void, RequiresCanRead, (IReadOnlyList_1_System_Linq_Expressions_Expression_ * items, String * paramName));
IL2CPP_REGISTER_METHOD(0x029C0000, void, RequiresCanWrite, (Expression * expression, String * paramName));
IL2CPP_REGISTER_METHODINFO(0x047257F0, Expression_RequiresCanWrite__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C0230, GotoExpression *, Break, (LabelTarget * target));
IL2CPP_REGISTER_METHOD(0x029C0320, GotoExpression *, Return, (LabelTarget * target));
IL2CPP_REGISTER_METHOD(0x029C0410, GotoExpression *, Return, (LabelTarget * target, Expression * value));
IL2CPP_REGISTER_METHOD(0x029C0510, GotoExpression *, Goto, (LabelTarget * target, Type * type));
IL2CPP_REGISTER_METHOD(0x029C05D0, GotoExpression *, Goto, (LabelTarget * target, Expression * value));
IL2CPP_REGISTER_METHOD(0x029C06D0, GotoExpression *, MakeGoto, (GotoExpressionKind__Enum kind, LabelTarget * target, Expression * value, Type * type));
IL2CPP_REGISTER_METHOD(0x029C0900, void, ValidateGoto, (LabelTarget * target, Expression * * value, String * targetParameter, String * valueParameter, Type * type));
IL2CPP_REGISTER_METHODINFO(0x04717ED0, Expression_ValidateGoto__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C0BE0, void, ValidateGotoType, (Type * expectedType, Expression * * value, String * paramName));
IL2CPP_REGISTER_METHODINFO(0x04784D58, Expression_ValidateGotoType__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C0D50, IndexExpression *, MakeIndex, (Expression * instance, PropertyInfo_1 * indexer, IEnumerable_1_System_Linq_Expressions_Expression_ * arguments));
IL2CPP_REGISTER_METHOD(0x029C0E40, IndexExpression *, ArrayAccess, (Expression * array, Expression__Array * indexes));
IL2CPP_REGISTER_METHOD(0x029C0EF0, IndexExpression *, ArrayAccess, (Expression * array, IEnumerable_1_System_Linq_Expressions_Expression_ * indexes));
IL2CPP_REGISTER_METHODINFO(0x04787840, Expression_ArrayAccess_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C1330, IndexExpression *, Property, (Expression * instance, PropertyInfo_1 * indexer, Expression__Array * arguments));
IL2CPP_REGISTER_METHOD(0x029C13F0, IndexExpression *, Property, (Expression * instance, PropertyInfo_1 * indexer, IEnumerable_1_System_Linq_Expressions_Expression_ * arguments));
IL2CPP_REGISTER_METHOD(0x029C14D0, IndexExpression *, MakeIndexProperty, (Expression * instance, PropertyInfo_1 * indexer, String * paramName, ReadOnlyCollection_1_System_Linq_Expressions_Expression_ * argList));
IL2CPP_REGISTER_METHOD(0x029C1670, void, ValidateIndexedProperty, (Expression * instance, PropertyInfo_1 * indexer, String * paramName, ReadOnlyCollection_1_System_Linq_Expressions_Expression_ * * argList));
IL2CPP_REGISTER_METHODINFO(0x04719D50, Expression_ValidateIndexedProperty__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C1D00, void, ValidateAccessor, (Expression * instance, MethodInfo_1 * method_1, ParameterInfo_1__Array * indexes, ReadOnlyCollection_1_System_Linq_Expressions_Expression_ * * arguments, String * paramName));
IL2CPP_REGISTER_METHODINFO(0x04792EA8, Expression_ValidateAccessor__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C1F30, void, ValidateAccessorArgumentTypes, (MethodInfo_1 * method_1, ParameterInfo_1__Array * indexes, ReadOnlyCollection_1_System_Linq_Expressions_Expression_ * * arguments, String * paramName));
IL2CPP_REGISTER_METHODINFO(0x0472B3B8, Expression_ValidateAccessorArgumentTypes__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C2500, InvocationExpression *, Invoke, (Expression * expression));
IL2CPP_REGISTER_METHOD(0x029C26E0, InvocationExpression *, Invoke, (Expression * expression, Expression * arg0));
IL2CPP_REGISTER_METHOD(0x029C2940, InvocationExpression *, Invoke, (Expression * expression, Expression * arg0, Expression * arg1));
IL2CPP_REGISTER_METHOD(0x029C2C10, InvocationExpression *, Invoke, (Expression * expression, Expression * arg0, Expression * arg1, Expression * arg2));
IL2CPP_REGISTER_METHOD(0x029C2F40, InvocationExpression *, Invoke, (Expression * expression, Expression * arg0, Expression * arg1, Expression * arg2, Expression * arg3));
IL2CPP_REGISTER_METHOD(0x029C32C0, InvocationExpression *, Invoke, (Expression * expression, Expression * arg0, Expression * arg1, Expression * arg2, Expression * arg3, Expression * arg4));
IL2CPP_REGISTER_METHOD(0x029C36B0, InvocationExpression *, Invoke, (Expression * expression, IEnumerable_1_System_Linq_Expressions_Expression_ * arguments));
IL2CPP_REGISTER_METHOD(0x029C3BF0, MethodInfo_1 *, GetInvokeMethod, (Expression * expression));
IL2CPP_REGISTER_METHODINFO(0x047179E0, Expression_GetInvokeMethod__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C3DF0, LabelExpression *, Label, (LabelTarget * target));
IL2CPP_REGISTER_METHOD(0x029C3E90, LabelExpression *, Label, (LabelTarget * target, Expression * defaultValue));
IL2CPP_REGISTER_METHOD(0x029C40A0, LabelTarget *, Label, ());
IL2CPP_REGISTER_METHOD(0x029C4170, LabelTarget *, Label, (String * name));
IL2CPP_REGISTER_METHOD(0x029C4250, LabelTarget *, Label, (Type * type));
IL2CPP_REGISTER_METHOD(0x029C42F0, LabelTarget *, Label, (Type * type, String * name));
IL2CPP_REGISTER_METHOD(0x029C4460, LambdaExpression *, CreateLambda, (Type * delegateType, Expression * body, String * name, bool tailCall, ReadOnlyCollection_1_System_Linq_Expressions_ParameterExpression_ * parameters));
IL2CPP_REGISTER_METHOD(0x029C4A70, LambdaExpression *, Lambda, (Expression * body, bool tailCall, ParameterExpression__Array * parameters));
IL2CPP_REGISTER_METHOD(0x029C4BB0, LambdaExpression *, Lambda, (Expression * body, bool tailCall, IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * parameters));
IL2CPP_REGISTER_METHOD(0x029C4C80, LambdaExpression *, Lambda, (Type * delegateType, Expression * body, ParameterExpression__Array * parameters));
IL2CPP_REGISTER_METHOD(0x029C4E00, LambdaExpression *, Lambda, (Expression * body, String * name, bool tailCall, IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * parameters));
IL2CPP_REGISTER_METHODINFO(0x04784638, Expression_Lambda_3__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C5270, LambdaExpression *, Lambda, (Type * delegateType, Expression * body, String * name, bool tailCall, IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * parameters));
IL2CPP_REGISTER_METHOD(0x029C5380, void, ValidateLambdaArgs, (Type * delegateType, Expression * * body, ReadOnlyCollection_1_System_Linq_Expressions_ParameterExpression_ * parameters, String * paramName));
IL2CPP_REGISTER_METHODINFO(0x0475F140, Expression_ValidateLambdaArgs__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C5B70, ListInitExpression *, ListInit, (NewExpression * newExpression, IEnumerable_1_System_Linq_Expressions_ElementInit_ * initializers));
IL2CPP_REGISTER_METHOD(0x029C5DD0, LoopExpression *, Loop, (Expression * body, LabelTarget * break_1));
IL2CPP_REGISTER_METHOD(0x029C5E80, LoopExpression *, Loop, (Expression * body, LabelTarget * break_1, LabelTarget * continue_1));
IL2CPP_REGISTER_METHODINFO(0x047768F0, Expression_Loop_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C60D0, MemberAssignment *, Bind, (MemberInfo_1 * member, Expression * expression));
IL2CPP_REGISTER_METHODINFO(0x047486D8, Expression_Bind__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C62F0, void, ValidateSettableFieldOrPropertyMember, (MemberInfo_1 * member, Type * * memberType));
IL2CPP_REGISTER_METHODINFO(0x04769380, Expression_ValidateSettableFieldOrPropertyMember__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C6500, MemberExpression *, Field, (Expression * expression, FieldInfo_1 * field));
IL2CPP_REGISTER_METHODINFO(0x047834B8, Expression_Field__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C67F0, MemberExpression *, Field, (Expression * expression, String * fieldName));
IL2CPP_REGISTER_METHODINFO(0x047717A0, Expression_Field_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C69A0, MemberExpression *, Property, (Expression * expression, String * propertyName));
IL2CPP_REGISTER_METHODINFO(0x0477BFC8, Expression_Property_2__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C6B40, MemberExpression *, Property, (Expression * expression, PropertyInfo_1 * property));
IL2CPP_REGISTER_METHODINFO(0x04760E68, Expression_Property_3__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C7000, PropertyInfo_1 *, GetProperty, (MethodInfo_1 * mi, String * paramName, int32_t index));
IL2CPP_REGISTER_METHODINFO(0x04730428, Expression_GetProperty__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C72A0, bool, CheckMethod, (MethodInfo_1 * method_1, MethodInfo_1 * propertyMethod));
IL2CPP_REGISTER_METHOD(0x029C73D0, MemberExpression *, MakeMemberAccess, (Expression * expression, MemberInfo_1 * member));
IL2CPP_REGISTER_METHODINFO(0x0476B5B0, Expression_MakeMemberAccess__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C7570, MemberInitExpression *, MemberInit, (NewExpression * newExpression, IEnumerable_1_System_Linq_Expressions_MemberBinding_ * bindings));
IL2CPP_REGISTER_METHOD(0x029C77C0, MemberListBinding *, ListBind, (MemberInfo_1 * member, IEnumerable_1_System_Linq_Expressions_ElementInit_ * initializers));
IL2CPP_REGISTER_METHOD(0x029C7990, void, ValidateListInitArgs, (Type * listType, ReadOnlyCollection_1_System_Linq_Expressions_ElementInit_ * initializers, String * listTypeParamName));
IL2CPP_REGISTER_METHODINFO(0x04791A50, Expression_ValidateListInitArgs__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C7B80, MemberMemberBinding *, MemberBind, (MemberInfo_1 * member, IEnumerable_1_System_Linq_Expressions_MemberBinding_ * bindings));
IL2CPP_REGISTER_METHOD(0x029C7D50, void, ValidateGettableFieldOrPropertyMember, (MemberInfo_1 * member, Type * * memberType));
IL2CPP_REGISTER_METHODINFO(0x04722EF0, Expression_ValidateGettableFieldOrPropertyMember__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C7FB0, void, ValidateMemberInitArgs, (Type * type, ReadOnlyCollection_1_System_Linq_Expressions_MemberBinding_ * bindings));
IL2CPP_REGISTER_METHODINFO(0x04792DA8, Expression_ValidateMemberInitArgs__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029C81B0, MethodCallExpression *, Call, (MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029C8350, MethodCallExpression *, Call, (MethodInfo_1 * method_1, Expression * arg0));
IL2CPP_REGISTER_METHOD(0x029C8580, MethodCallExpression *, Call, (MethodInfo_1 * method_1, Expression * arg0, Expression * arg1));
IL2CPP_REGISTER_METHOD(0x029C8820, MethodCallExpression *, Call, (MethodInfo_1 * method_1, Expression * arg0, Expression * arg1, Expression * arg2));
IL2CPP_REGISTER_METHOD(0x029C8B40, MethodCallExpression *, Call, (MethodInfo_1 * method_1, Expression * arg0, Expression * arg1, Expression * arg2, Expression * arg3));
IL2CPP_REGISTER_METHOD(0x029C8ED0, MethodCallExpression *, Call, (MethodInfo_1 * method_1, Expression * arg0, Expression * arg1, Expression * arg2, Expression * arg3, Expression * arg4));
IL2CPP_REGISTER_METHOD(0x029C92F0, MethodCallExpression *, Call, (MethodInfo_1 * method_1, Expression__Array * arguments));
IL2CPP_REGISTER_METHOD(0x029C93A0, MethodCallExpression *, Call, (MethodInfo_1 * method_1, IEnumerable_1_System_Linq_Expressions_Expression_ * arguments));
IL2CPP_REGISTER_METHOD(0x029C9450, MethodCallExpression *, Call, (Expression * instance, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029C96D0, MethodCallExpression *, Call, (Expression * instance, MethodInfo_1 * method_1, Expression__Array * arguments));
IL2CPP_REGISTER_METHOD(0x029C9790, MethodCallExpression *, Call, (Expression * instance, MethodInfo_1 * method_1, Expression * arg0));
IL2CPP_REGISTER_METHOD(0x029C9AB0, MethodCallExpression *, Call, (Expression * instance, MethodInfo_1 * method_1, Expression * arg0, Expression * arg1));
IL2CPP_REGISTER_METHOD(0x029C9E50, MethodCallExpression *, Call, (Expression * instance, MethodInfo_1 * method_1, Expression * arg0, Expression * arg1, Expression * arg2));
IL2CPP_REGISTER_METHOD(0x029CA270, MethodCallExpression *, Call, (Expression * instance, String * methodName, Type__Array * typeArguments, Expression__Array * arguments));
IL2CPP_REGISTER_METHOD(0x029CA3C0, MethodCallExpression *, Call, (Expression * instance, MethodInfo_1 * method_1, IEnumerable_1_System_Linq_Expressions_Expression_ * arguments));
IL2CPP_REGISTER_METHOD(0x029CA9E0, ParameterInfo_1__Array *, ValidateMethodAndGetParameters, (Expression * instance, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029CAAB0, void, ValidateStaticOrInstanceMethod, (Expression * instance, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x047970B8, Expression_ValidateStaticOrInstanceMethod__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CABF0, void, ValidateCallInstanceType, (Type * instanceType, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x0475CFC0, Expression_ValidateCallInstanceType__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CACC0, void, ValidateArgumentTypes, (MethodBase * method_1, ExpressionType__Enum nodeKind, ReadOnlyCollection_1_System_Linq_Expressions_Expression_ * * arguments, String * methodParamName));
IL2CPP_REGISTER_METHOD(0x029CACD0, ParameterInfo_1__Array *, GetParametersForValidation, (MethodBase * method_1, ExpressionType__Enum nodeKind));
IL2CPP_REGISTER_METHOD(0x029CACE0, void, ValidateArgumentCount, (MethodBase * method_1, ExpressionType__Enum nodeKind, int32_t count, ParameterInfo_1__Array * pis));
IL2CPP_REGISTER_METHOD(0x029CACF0, Expression *, ValidateOneArgument, (MethodBase * method_1, ExpressionType__Enum nodeKind, Expression * arg, ParameterInfo_1 * pi, String * methodParamName, String * argumentParamName));
IL2CPP_REGISTER_METHOD(0x029CAD30, bool, TryQuote, (Type * parameterType, Expression * * argument));
IL2CPP_REGISTER_METHOD(0x029CAD40, MethodInfo_1 *, FindMethod, (Type * type, String * methodName, Type__Array * typeArgs, Expression__Array * args, BindingFlags__Enum flags));
IL2CPP_REGISTER_METHODINFO(0x0473FB20, Expression_FindMethod__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CB160, bool, IsCompatible, (MethodBase * m, Expression__Array * arguments));
IL2CPP_REGISTER_METHOD(0x029CB3E0, MethodInfo_1 *, ApplyTypeArgs, (MethodInfo_1 * m, Type__Array * typeArgs));
IL2CPP_REGISTER_METHOD(0x029CB4A0, NewArrayExpression *, NewArrayInit, (Type * type, Expression__Array * initializers));
IL2CPP_REGISTER_METHOD(0x029CB550, NewArrayExpression *, NewArrayInit, (Type * type, IEnumerable_1_System_Linq_Expressions_Expression_ * initializers));
IL2CPP_REGISTER_METHODINFO(0x047921A8, Expression_NewArrayInit_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CBA10, NewArrayExpression *, NewArrayBounds, (Type * type, IEnumerable_1_System_Linq_Expressions_Expression_ * bounds));
IL2CPP_REGISTER_METHODINFO(0x0475E100, Expression_NewArrayBounds__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CBCB0, NewExpression *, New, (ConstructorInfo * constructor, IEnumerable_1_System_Linq_Expressions_Expression_ * arguments));
IL2CPP_REGISTER_METHOD(0x029CBF50, NewExpression *, New, (ConstructorInfo * constructor, IEnumerable_1_System_Linq_Expressions_Expression_ * arguments, IEnumerable_1_System_Reflection_MemberInfo_ * members));
IL2CPP_REGISTER_METHOD(0x029CC210, void, ValidateNewArgs, (ConstructorInfo * constructor, ReadOnlyCollection_1_System_Linq_Expressions_Expression_ * * arguments, ReadOnlyCollection_1_System_Reflection_MemberInfo_ * * members));
IL2CPP_REGISTER_METHODINFO(0x04756F08, Expression_ValidateNewArgs__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CCDF0, void, ValidateAnonymousTypeMember, (MemberInfo_1 * * member, Type * * memberType, String * paramName, int32_t index));
IL2CPP_REGISTER_METHODINFO(0x0476E430, Expression_ValidateAnonymousTypeMember__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CD130, void, ValidateConstructor, (ConstructorInfo * constructor, String * paramName));
IL2CPP_REGISTER_METHODINFO(0x04738610, Expression_ValidateConstructor__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CD1F0, ParameterExpression *, Parameter, (Type * type));
IL2CPP_REGISTER_METHOD(0x029CD290, ParameterExpression *, Variable, (Type * type));
IL2CPP_REGISTER_METHOD(0x029CD330, ParameterExpression *, Parameter, (Type * type, String * name));
IL2CPP_REGISTER_METHOD(0x029CD430, ParameterExpression *, Variable, (Type * type, String * name));
IL2CPP_REGISTER_METHOD(0x029CD4F0, void, Validate, (Type * type, bool allowByRef));
IL2CPP_REGISTER_METHODINFO(0x0474AC68, Expression_Validate__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CD600, RuntimeVariablesExpression *, RuntimeVariables, (IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * variables));
IL2CPP_REGISTER_METHOD(0x029CD910, SwitchCase *, SwitchCase, (Expression * body, IEnumerable_1_System_Linq_Expressions_Expression_ * testValues));
IL2CPP_REGISTER_METHOD(0x029CDB90, SwitchExpression *, Switch, (Type * type, Expression * switchValue, Expression * defaultBody, MethodInfo_1 * comparison, IEnumerable_1_System_Linq_Expressions_SwitchCase_ * cases));
IL2CPP_REGISTER_METHODINFO(0x047872A8, Expression_Switch__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CE9F0, void, ValidateSwitchCaseType, (Expression * case_1, bool customType, Type * resultType, String * parameterName));
IL2CPP_REGISTER_METHODINFO(0x0471FB20, Expression_ValidateSwitchCaseType__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CEB60, TryExpression *, TryFinally, (Expression * body, Expression * finally));
IL2CPP_REGISTER_METHOD(0x029CEC20, TryExpression *, TryCatch, (Expression * body, CatchBlock__Array * handlers));
IL2CPP_REGISTER_METHOD(0x029CECE0, TryExpression *, MakeTry, (Type * type, Expression * body, Expression * finally, Expression * fault, IEnumerable_1_System_Linq_Expressions_CatchBlock_ * handlers));
IL2CPP_REGISTER_METHODINFO(0x04776C88, Expression_MakeTry__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CF090, void, ValidateTryAndCatchHaveSameType, (Type * type, Expression * tryBody, ReadOnlyCollection_1_System_Linq_Expressions_CatchBlock_ * handlers));
IL2CPP_REGISTER_METHODINFO(0x047111F0, Expression_ValidateTryAndCatchHaveSameType__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CF6D0, TypeBinaryExpression *, TypeIs, (Expression * expression, Type * type));
IL2CPP_REGISTER_METHODINFO(0x0473E1B8, Expression_TypeIs__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CF8B0, TypeBinaryExpression *, TypeEqual, (Expression * expression, Type * type));
IL2CPP_REGISTER_METHODINFO(0x0477A6A0, Expression_TypeEqual__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029CFA90, UnaryExpression *, MakeUnary, (ExpressionType__Enum unaryType, Expression * operand, Type * type, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x0475A1B8, Expression_MakeUnary__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D01E0, UnaryExpression *, GetUserDefinedUnaryOperatorOrThrow, (ExpressionType__Enum unaryType, String * name, Expression * operand));
IL2CPP_REGISTER_METHODINFO(0x04743390, Expression_GetUserDefinedUnaryOperatorOrThrow__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D03E0, UnaryExpression *, GetUserDefinedUnaryOperator, (ExpressionType__Enum unaryType, String * name, Expression * operand));
IL2CPP_REGISTER_METHOD(0x029D0880, UnaryExpression *, GetMethodBasedUnaryOperator, (ExpressionType__Enum unaryType, Expression * operand, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x04751B48, Expression_GetMethodBasedUnaryOperator__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D0D80, UnaryExpression *, GetUserDefinedCoercionOrThrow, (ExpressionType__Enum coercionType, Expression * expression, Type * convertToType));
IL2CPP_REGISTER_METHODINFO(0x04771990, Expression_GetUserDefinedCoercionOrThrow__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D0E70, UnaryExpression *, GetUserDefinedCoercion, (ExpressionType__Enum coercionType, Expression * expression, Type * convertToType));
IL2CPP_REGISTER_METHOD(0x029D1030, UnaryExpression *, GetMethodBasedCoercionOperator, (ExpressionType__Enum unaryType, Expression * operand, Type * convertToType, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x0478BA98, Expression_GetMethodBasedCoercionOperator__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D14B0, UnaryExpression *, Negate, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D1770, UnaryExpression *, UnaryPlus, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D1A00, UnaryExpression *, NegateChecked, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D1CC0, UnaryExpression *, Not, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D1F90, UnaryExpression *, IsFalse, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D2220, UnaryExpression *, IsTrue, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D24B0, UnaryExpression *, OnesComplement, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D2740, UnaryExpression *, TypeAs, (Expression * expression, Type * type));
IL2CPP_REGISTER_METHODINFO(0x04712138, Expression_TypeAs__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D2950, UnaryExpression *, Unbox, (Expression * expression, Type * type));
IL2CPP_REGISTER_METHODINFO(0x0476B8E0, Expression_Unbox__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D2BF0, UnaryExpression *, Convert, (Expression * expression, Type * type));
IL2CPP_REGISTER_METHOD(0x029D2CA0, UnaryExpression *, Convert, (Expression * expression, Type * type, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D2F70, UnaryExpression *, ConvertChecked, (Expression * expression, Type * type, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D3320, UnaryExpression *, ArrayLength, (Expression * array));
IL2CPP_REGISTER_METHODINFO(0x047807A0, Expression_ArrayLength__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D3610, UnaryExpression *, Quote, (Expression * expression));
IL2CPP_REGISTER_METHODINFO(0x04736728, Expression_Quote__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D3810, UnaryExpression *, Throw, (Expression * value, Type * type));
IL2CPP_REGISTER_METHODINFO(0x04765838, Expression_Throw__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D3A20, UnaryExpression *, Increment, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D3CB0, UnaryExpression *, Decrement, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D3F40, UnaryExpression *, PreIncrementAssign, (Expression * expression));
IL2CPP_REGISTER_METHOD(0x029D3FE0, UnaryExpression *, PreIncrementAssign, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D4090, UnaryExpression *, PreDecrementAssign, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D4140, UnaryExpression *, PostIncrementAssign, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D41F0, UnaryExpression *, PostDecrementAssign, (Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHOD(0x029D42A0, UnaryExpression *, MakeOpAssignUnary, (ExpressionType__Enum kind, Expression * expression, MethodInfo_1 * method_1));
IL2CPP_REGISTER_METHODINFO(0x0470EBA0, Expression_MakeOpAssignUnary__MethodInfo);
IL2CPP_REGISTER_METHOD(0x029D4630, void, __cctor, ());
IL2CPP_REGISTER_METHOD(0x0153CE20, Expression_1_System_Object_ *, Lambda, (Expression * body, ParameterExpression__Array * parameters));
IL2CPP_REGISTER_METHOD(0x0153CC90, Expression_1_System_Object_ *, Lambda, (Expression * body, bool tailCall, ParameterExpression__Array * parameters));
IL2CPP_REGISTER_METHOD(0x0153CD60, Expression_1_System_Object_ *, Lambda, (Expression * body, IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * parameters));
IL2CPP_REGISTER_METHOD(0x0153CBC0, Expression_1_System_Object_ *, Lambda, (Expression * body, bool tailCall, IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * parameters));
IL2CPP_REGISTER_METHOD(0x0153CEE0, Expression_1_System_Object_ *, Lambda, (Expression * body, String * name, bool tailCall, IEnumerable_1_System_Linq_Expressions_ParameterExpression_ * parameters));
IL2CPP_REGISTER_METHOD(0x0153CC90, Expression_1_DynamicInstantiationDescriptor_CountGetter_ *, Lambda, (Expression * body, bool tailCall, ParameterExpression__Array * parameters));
IL2CPP_REGISTER_METHODINFO(0x04748F08, Expression_Lambda_10__MethodInfo);
IL2CPP_REGISTER_METHOD(0x0153CE20, Expression_1_DynamicInstantiationScanner_EvaluationFn_1_ *, Lambda, (Expression * body, ParameterExpression__Array * parameters));
IL2CPP_REGISTER_METHODINFO(0x04796BA8, Expression_Lambda_11__MethodInfo);
}
