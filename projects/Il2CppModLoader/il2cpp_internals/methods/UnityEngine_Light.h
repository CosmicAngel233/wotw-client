using namespace app;

namespace app::methods::UnityEngine::Light {
IL2CPP_REGISTER_METHOD(0x003F8A60, void, __ctor, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252E760, LightType__Enum, get_type, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252E7B0, void, set_type, (Light * __this, LightType__Enum value));
IL2CPP_REGISTER_METHOD(0x0252E810, float, get_spotAngle, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252E860, void, set_spotAngle, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252E8C0, Color, get_color, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252E940, void, set_color, (Light * __this, Color value));
IL2CPP_REGISTER_METHOD(0x0252E9A0, float, get_colorTemperature, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252E9F0, void, set_colorTemperature, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252EA50, float, get_intensity, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252EAA0, void, set_intensity, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252EB00, float, get_bounceIntensity, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252EB50, void, set_bounceIntensity, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252EBB0, int32_t, get_shadowCustomResolution, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252EC00, void, set_shadowCustomResolution, (Light * __this, int32_t value));
IL2CPP_REGISTER_METHOD(0x0252EC60, float, get_shadowBias, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252ECB0, void, set_shadowBias, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252ED10, float, get_shadowNormalBias, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252ED60, void, set_shadowNormalBias, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252EDC0, float, get_shadowNearPlane, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252EE10, void, set_shadowNearPlane, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252EE70, float, get_range, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252EEC0, void, set_range, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252EF20, Flare *, get_flare, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252EF70, void, set_flare, (Light * __this, Flare * value));
IL2CPP_REGISTER_METHOD(0x0252EFD0, LightBakingOutput, get_bakingOutput, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F060, void, set_bakingOutput, (Light * __this, LightBakingOutput value));
IL2CPP_REGISTER_METHOD(0x0252F0C0, int32_t, get_cullingMask, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F110, void, set_cullingMask, (Light * __this, int32_t value));
IL2CPP_REGISTER_METHOD(0x0252F170, LightShadowCasterMode__Enum, get_lightShadowCasterMode, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F1C0, void, set_lightShadowCasterMode, (Light * __this, LightShadowCasterMode__Enum value));
IL2CPP_REGISTER_METHOD(0x0252F220, void, Reset, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F270, LightShadows__Enum, get_shadows, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F2C0, void, set_shadows, (Light * __this, LightShadows__Enum value));
IL2CPP_REGISTER_METHOD(0x0252F320, float, get_shadowStrength, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F370, void, set_shadowStrength, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252F3D0, LightShadowResolution__Enum, get_shadowResolution, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F420, void, set_shadowResolution, (Light * __this, LightShadowResolution__Enum value));
IL2CPP_REGISTER_METHOD(0x0252F480, float, get_shadowSoftness, (Light * __this));
IL2CPP_REGISTER_METHOD(0x002FA000, void, set_shadowSoftness, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252F490, float, get_shadowSoftnessFade, (Light * __this));
IL2CPP_REGISTER_METHOD(0x002FA000, void, set_shadowSoftnessFade, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252F4A0, Single__Array *, get_layerShadowCullDistances, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F4F0, void, set_layerShadowCullDistances, (Light * __this, Single__Array * value));
IL2CPP_REGISTER_METHOD(0x0252F550, float, get_cookieSize, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F5A0, void, set_cookieSize, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x0252F600, Texture *, get_cookie, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F650, void, set_cookie, (Light * __this, Texture * value));
IL2CPP_REGISTER_METHOD(0x0252F6B0, LightRenderMode__Enum, get_renderMode, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252F700, void, set_renderMode, (Light * __this, LightRenderMode__Enum value));
IL2CPP_REGISTER_METHOD(0x01F2AB70, int32_t, get_bakedIndex, (Light * __this));
IL2CPP_REGISTER_METHOD(0x00654960, void, set_bakedIndex, (Light * __this, int32_t value));
IL2CPP_REGISTER_METHOD(0x0252F760, void, SetFalloffTable, (Light * __this, Single__Array * input));
IL2CPP_REGISTER_METHOD(0x0252F7C0, void, SetAllLightsFalloffToInverseSquared, (MethodInfo * method));
IL2CPP_REGISTER_METHOD(0x0252F810, void, SetAllLightsFalloffToUnityLegacy, (MethodInfo * method));
IL2CPP_REGISTER_METHOD(0x0252F860, void, AddCommandBuffer, (Light * __this, LightEvent__Enum evt, CommandBuffer * buffer));
IL2CPP_REGISTER_METHOD(0x0252F8E0, void, AddCommandBuffer, (Light * __this, LightEvent__Enum evt, CommandBuffer * buffer, ShadowMapPass__Enum shadowPassMask));
IL2CPP_REGISTER_METHOD(0x0252F960, void, AddCommandBufferAsync, (Light * __this, LightEvent__Enum evt, CommandBuffer * buffer, ComputeQueueType__Enum queueType));
IL2CPP_REGISTER_METHOD(0x0252F9F0, void, AddCommandBufferAsync, (Light * __this, LightEvent__Enum evt, CommandBuffer * buffer, ShadowMapPass__Enum shadowPassMask, ComputeQueueType__Enum queueType));
IL2CPP_REGISTER_METHOD(0x0252FA70, void, RemoveCommandBuffer, (Light * __this, LightEvent__Enum evt, CommandBuffer * buffer));
IL2CPP_REGISTER_METHOD(0x0252FAE0, void, RemoveCommandBuffers, (Light * __this, LightEvent__Enum evt));
IL2CPP_REGISTER_METHOD(0x0252FB40, void, RemoveAllCommandBuffers, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252FB90, CommandBuffer__Array *, GetCommandBuffers, (Light * __this, LightEvent__Enum evt));
IL2CPP_REGISTER_METHOD(0x0252FBF0, int32_t, get_commandBufferCount, (Light * __this));
IL2CPP_REGISTER_METHOD(0x0252FC40, int32_t, get_pixelLightCount, (MethodInfo * method));
IL2CPP_REGISTER_METHOD(0x0252FC90, void, set_pixelLightCount, (int32_t value));
IL2CPP_REGISTER_METHOD(0x0252FCE0, Light__Array *, GetLights, (LightType__Enum type, int32_t layer));
IL2CPP_REGISTER_METHOD(0x024BF590, float, get_shadowConstantBias, (Light * __this));
IL2CPP_REGISTER_METHOD(0x002FA000, void, set_shadowConstantBias, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x024BF590, float, get_shadowObjectSizeBias, (Light * __this));
IL2CPP_REGISTER_METHOD(0x002FA000, void, set_shadowObjectSizeBias, (Light * __this, float value));
IL2CPP_REGISTER_METHOD(0x01F1B650, bool, get_attenuate, (Light * __this));
IL2CPP_REGISTER_METHOD(0x002FA000, void, set_attenuate, (Light * __this, bool value));
IL2CPP_REGISTER_METHOD(0x0252FD40, void, get_color_Injected, (Light * __this, Color * ret));
IL2CPP_REGISTER_METHOD(0x0252FDA0, void, set_color_Injected, (Light * __this, Color * value));
IL2CPP_REGISTER_METHOD(0x0252FE00, void, get_bakingOutput_Injected, (Light * __this, LightBakingOutput * ret));
IL2CPP_REGISTER_METHOD(0x0252FE60, void, set_bakingOutput_Injected, (Light * __this, LightBakingOutput * value));
}
