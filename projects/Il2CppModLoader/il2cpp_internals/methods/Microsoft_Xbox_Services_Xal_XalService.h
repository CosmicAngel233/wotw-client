#include <interception_macros.h>

namespace app::methods::Microsoft::Xbox::Services::Xal::XalService {
IL2CPP_REGISTER_METHOD(0x014359F0, XalService *, get_Instance, ());
IL2CPP_REGISTER_METHOD(0x01435BE0, void, set_Instance, (XalService * value));
IL2CPP_REGISTER_METHOD(0x01435C90, void, __ctor, (XalService * __this));
IL2CPP_REGISTER_METHOD(0x01435FE0, void, Initialize, (XalService * __this, InitArgs * args));
IL2CPP_REGISTER_METHOD(0x01436230, Task *, CleanupAsync, (XalService * __this));
IL2CPP_REGISTER_METHOD(0x014368B0, void, Cleanup, (XalService * __this));
IL2CPP_REGISTER_METHOD(0x01436990, uint32_t, GetMaxUsers, (XalService * __this));
IL2CPP_REGISTER_METHOD(0x01436AC0, void, OnShowUrl, (void * context, void * userContext, void * operation, String * startUrl, String * finalUrl, bool suppressUi));
IL2CPP_REGISTER_METHODINFO(0x04738900, XalService_OnShowUrl__MethodInfo);
IL2CPP_REGISTER_METHOD(0x002FA000, void, ShowWebView, (XalService * __this, void * operationId, String * startUrl, String * finalUrl, bool suppressUi));
IL2CPP_REGISTER_METHOD(0x01436BF0, void, SetPlatformStorageEventHandlers, (XalService * __this, PlatformStorageWriteEventHandler * writeHandler, PlatformStorageReadEventHandler * readHandler, PlatformStorageClearEventHandler * clearHandler));
IL2CPP_REGISTER_METHOD(0x01437150, void, OnPlatformStorageWrite, (void * context, void * userContext, void * operation, String * key, void * dataSize, void * data));
IL2CPP_REGISTER_METHODINFO(0x04723A58, XalService_OnPlatformStorageWrite__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01437680, void, OnPlatformStorageRead, (void * context, void * userContext, void * operation, String * key));
IL2CPP_REGISTER_METHODINFO(0x04730868, XalService_OnPlatformStorageRead__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01437B60, void, OnPlatformStorageClear, (void * context, void * userContext, void * operation, String * key));
IL2CPP_REGISTER_METHODINFO(0x0471D688, XalService_OnPlatformStorageClear__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01438030, void, SetPlatformWebViewEventHandler, (XalService * __this, WebShowUrlEventHandler * webHandler));
IL2CPP_REGISTER_METHOD(0x01438270, void, SetPlatformWebShowUrlComplete, (XalService * __this, void * operationId, XalPlatformOperationResult__Enum result, String * url));
IL2CPP_REGISTER_METHOD(0x01438330, void, SetPlatformRemoteConnectHandlers, (XalService * __this, PlatformRemoteConnectShowPromptEventHandler * showHandler, PlatformRemoteConnectClosePromptEventHandler * closeHandler));
IL2CPP_REGISTER_METHOD(0x01438810, void, OnPlatformRemoteConnectShow, (void * context, void * userContext, void * operation, String * url, String * code));
IL2CPP_REGISTER_METHODINFO(0x04744B00, XalService_OnPlatformRemoteConnectShow__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01438C40, void, OnPlatformRemoteConnectClose, (void * context, void * userContext, void * operation));
IL2CPP_REGISTER_METHODINFO(0x0477C998, XalService_OnPlatformRemoteConnectClose__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01438DB0, Task_1_Microsoft_Xbox_Services_Xal_XalUser_ *, TryAddFirstUserSilentAsync, (XalService * __this));
IL2CPP_REGISTER_METHOD(0x01439280, Task_1_Microsoft_Xbox_Services_Xal_XalUser_ *, AddUserWithUiAsync, (XalService * __this));
IL2CPP_REGISTER_METHOD(0x01439750, bool, DispatchWorkQueue, (XalService * __this));
IL2CPP_REGISTER_METHOD(0x01439800, bool, DispatchCompletionQueue, (XalService * __this));
IL2CPP_REGISTER_METHOD(0x014398B0, void, Update, (XalService * __this));
IL2CPP_REGISTER_METHOD(0x01439950, void, ThrowIfFailed, (int32_t errCode));
IL2CPP_REGISTER_METHODINFO(0x0474EF30, XalService_ThrowIfFailed__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01439A00, void *, WrapAsyncBlock, (void * asyncQueue, XalService_AsyncCompletionRoutine * callback));
IL2CPP_REGISTER_METHOD(0x01439C50, void, AsyncBlockCallback, (void * block));
IL2CPP_REGISTER_METHODINFO(0x0473FC60, XalService_AsyncBlockCallback__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01439DC0, void, DebugLog, (String * areaName, XalTraceLevel__Enum level, uint64_t threadId, uint64_t timestamp, String * message));
IL2CPP_REGISTER_METHODINFO(0x047033D0, XalService_DebugLog__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01439EC0, void, ResetStatics, ());
IL2CPP_REGISTER_METHOD(0x0143A140, int32_t, XalWrapper_XalUserDuplicateHandle, (void * user, void * * duplicateUser));
IL2CPP_REGISTER_METHOD(0x0143A1F0, void, XalWrapper_XalUserCloseHandle, (void * user));
IL2CPP_REGISTER_METHOD(0x0143A290, int32_t, XalWrapper_XalInitialize, (XalService_CommonArgs * common, uint32_t thirdPartyConsentCount, String__Array * thirdPartyConsents, XalService_DeviceInfoArgs * deviceInfo, XalService_TelemetryInfoArgs * telemetryInfo, void * internalWorkQueue));
IL2CPP_REGISTER_METHOD(0x0143A9D0, int32_t, XalWrapper_XalCleanupAsync, (void * async));
IL2CPP_REGISTER_METHOD(0x0143AA70, int32_t, XalWrapper_XalGetMaxUsers, (uint32_t * maxUsers));
IL2CPP_REGISTER_METHOD(0x0143AB10, int32_t, XalWrapper_CreateAsyncQueue, (void * * asyncQueue));
IL2CPP_REGISTER_METHOD(0x0143ABB0, void, XalWrapper_CloseAsyncQueue, (void * asyncQueue));
IL2CPP_REGISTER_METHOD(0x0143AC50, int32_t, XalWrapper_GetAsyncStatus, (void * async, bool wait));
IL2CPP_REGISTER_METHOD(0x0143AD00, bool, XalWrapper_DispatchAsyncQueue, (void * queue, XalService_AsyncQueueCallbackType__Enum type, uint32_t timeoutInMs));
IL2CPP_REGISTER_METHOD(0x0143ADC0, void, XalWrapper_AsyncInitialize, (void * queue, uint64_t * callbackToken));
IL2CPP_REGISTER_METHOD(0x0143AE70, void, XalWrapper_AsyncCleanup, (void * queue, uint64_t callbackToken));
IL2CPP_REGISTER_METHOD(0x0143AF20, void, XalWrapper_AsyncDrainCompletionQueueUntilEmpty, (void * queue));
IL2CPP_REGISTER_METHOD(0x0143AFC0, int32_t, XalWrapper_XalTryAddFirstUserSilentlyAsync, (void * async, void * userContext));
IL2CPP_REGISTER_METHOD(0x0143B070, int32_t, XalWrapper_XalTryAddFirstUserSilentlyResult, (void * async, void * * newUser));
IL2CPP_REGISTER_METHOD(0x0143B120, int32_t, XalWrapper_XalAddUserWithUiAsync, (void * queue, void * userContext));
IL2CPP_REGISTER_METHOD(0x0143B1D0, int32_t, XalWrapper_XalAddUserWithUiResult, (void * async, void * * newUser));
IL2CPP_REGISTER_METHOD(0x0143B280, int32_t, XalWrapper_XalPlatformWebSetEventHandler, (void * queue, void * context, XalService_XalPlatformWebShowUrlEventHandler * handler));
IL2CPP_REGISTER_METHOD(0x0143B340, int32_t, XalWrapper_XalPlatformWebShowUrlComplete, (void * operation, XalPlatformOperationResult__Enum result, String * url));
IL2CPP_REGISTER_METHOD(0x0143B4E0, int32_t, XalWrapper_XalPlatformStorageSetEventHandlers, (void * queue, XalService_XalPlatformStorageEventHandlers * handlers));
IL2CPP_REGISTER_METHOD(0x0143B690, int32_t, XalWrapper_XalPlatformStorageWriteComplete, (void * operation, XalPlatformOperationResult__Enum result));
IL2CPP_REGISTER_METHOD(0x0143B740, int32_t, XalWrapper_XalPlatformStorageReadComplete, (void * operation, XalPlatformOperationResult__Enum result, void * dataSize, Byte__Array * data));
IL2CPP_REGISTER_METHOD(0x0143B810, int32_t, XalWrapper_XalPlatformStorageClearComplete, (void * operation, XalPlatformOperationResult__Enum result));
IL2CPP_REGISTER_METHOD(0x0143B8C0, int32_t, XalWrapper_XalPlatformRemoteConnectSetEventHandlers, (void * queue, XalService_XalPlatformRemoteConnectEventHandlers * handlers));
IL2CPP_REGISTER_METHOD(0x0143BA50, int32_t, XalWrapper_XalPlatformRemoteConnectCancelPrompt, (void * operation));
IL2CPP_REGISTER_METHOD(0x0143BAF0, void, XalWrapper_HCTraceSetClientCallback, (XalService_XalLogCallback * callback));
IL2CPP_REGISTER_METHOD(0x0143BB90, bool, XalWrapper_HCTraceSetTraceToDebugger, (bool traceToDebugger));
IL2CPP_REGISTER_METHOD(0x002FA000, void, __cctor, ());
}
