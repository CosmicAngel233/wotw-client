using namespace app;

namespace app::methods::BlockableLaser {
IL2CPP_REGISTER_METHOD(0x00D2CC30, Vector3, get_TransformedLaserDirection, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2CD40, void, UpdateActivationTimeslicer, (MethodInfo * method));
IL2CPP_REGISTER_METHOD(0x00D2CDF0, bool, get_Activated, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2CE00, void, set_Activated, (BlockableLaser * __this, bool value));
IL2CPP_REGISTER_METHOD(0x00D2CE30, float, get_CurrentScale, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2CFE0, void, OnValidate, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2CFF0, void, Validate, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2D2A0, void, set_DamageCollidersActive, (BlockableLaser * __this, bool value));
IL2CPP_REGISTER_METHOD(0x00D2D480, void, OnActivatedQueued, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2D620, void, OnActivatedImmediate, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2DF30, void, OnDeactivateQueued, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2E0D0, void, OnDeactivateImmediate, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2EA50, void, DoAnticipation, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2EEF0, void, OnEnable, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2F180, void, OnDisable, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2F280, void, Awake, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2F840, void, EnableHitFXViaTrigger, (BlockableLaser * __this));
IL2CPP_REGISTER_METHODINFO(0x04742978, BlockableLaser_EnableHitFXViaTrigger__MethodInfo);
IL2CPP_REGISTER_METHOD(0x005B90C0, void, DisableHitFXViaTrigger, (BlockableLaser * __this));
IL2CPP_REGISTER_METHODINFO(0x04748D00, BlockableLaser_DisableHitFXViaTrigger__MethodInfo);
IL2CPP_REGISTER_METHOD(0x00D2F850, bool, get_ShouldPlayImpactFX, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2F880, void, OnDestroy, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2F970, void, PlayLaserLoopSFX, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2FA00, void, StopLaserLoopSFX, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D2FAC0, Damage *, DealLaserDamage, (BlockableLaser * __this, GameObject * hitObject));
IL2CPP_REGISTER_METHOD(0x00D2FFE0, void, FixedUpdate, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D30000, GameObject *, GetImpactEffectPrefab, (BlockableLaser * __this, Collider * hitCollider));
IL2CPP_REGISTER_METHOD(0x00D30310, GameObject *, GetImpactLoopEffectPrefab, (BlockableLaser * __this, Collider * hitCollider));
IL2CPP_REGISTER_METHOD(0x00D30620, void, PerformLaserLogic, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D31F50, void, UpdateBeamRotationPivot, (BlockableLaser * __this, Vector3 direction));
IL2CPP_REGISTER_METHOD(0x00D32070, float, ComputImpactEffectAngle, (BlockableLaser * __this, Vector3 hitNormal, Vector3 laserDirection));
IL2CPP_REGISTER_METHOD(0x00D321E0, void, PerformLaserRaycast, (BlockableLaser * __this, Vector3 * laserEndPoint, Vector3 * hitNormal, float * bestDistance, Collider * * hitCollider));
IL2CPP_REGISTER_METHOD(0x00D32880, bool, SimpleCastOri, (BlockableLaser * __this, SpherecastCommand cmd, RaycastHit * hit, Collider * * hitCollider));
IL2CPP_REGISTER_METHOD(0x00D32E50, bool, IsLaserOnScreen, (BlockableLaser * __this, Vector3 endPoint));
IL2CPP_REGISTER_METHOD(0x00437A70, float, get_CurrentLaserLength, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D33510, void, set_CurrentLaserLength, (BlockableLaser * __this, float value));
IL2CPP_REGISTER_METHOD(0x00D33520, void, DispatchOfTheLastImpactLoopEffect, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D337F0, void, DispatchOfTheLastImpactPointLight, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D338D0, bool, get_IsSuspended, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D338E0, void, set_IsSuspended, (BlockableLaser * __this, bool value));
IL2CPP_REGISTER_METHOD(0x00D338F0, SuspendableMask__Enum, get_Mask, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D33900, void, set_Mask, (BlockableLaser * __this, SuspendableMask__Enum value));
IL2CPP_REGISTER_METHOD(0x00D33910, void, Serialize, (BlockableLaser * __this, Archive * ar));
IL2CPP_REGISTER_METHOD(0x00D339D0, Vector3, NearestPointOnFiniteLine, (Vector2 start, Vector2 end, Vector2 pnt));
IL2CPP_REGISTER_METHOD(0x00D33BE0, void, __ctor, (BlockableLaser * __this));
IL2CPP_REGISTER_METHOD(0x00D340B0, void, __cctor, (MethodInfo * method));
IL2CPP_REGISTER_METHOD(0x00D34200, void, _OnActivatedImmediate_b__39_0, (BlockableLaser * __this));
IL2CPP_REGISTER_METHODINFO(0x047233C8, BlockableLaser__OnActivatedImmediate_b__39_0__MethodInfo);
IL2CPP_REGISTER_METHOD(0x00D343E0, void, _OnDeactivateImmediate_b__41_0, (BlockableLaser * __this));
IL2CPP_REGISTER_METHODINFO(0x04724520, BlockableLaser__OnDeactivateImmediate_b__41_0__MethodInfo);
}
