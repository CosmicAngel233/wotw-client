#include <interception_macros.h>

namespace app::methods::System::Threading::Tasks::Task {
IL2CPP_REGISTER_METHOD(0x02330800, bool, AddToActiveTasks, (Task * task));
IL2CPP_REGISTER_METHOD(0x023309F0, void, RemoveFromActiveTasks, (int32_t taskId));
IL2CPP_REGISTER_METHOD(0x02330B90, void, __ctor, (Task * __this, bool canceled, TaskCreationOptions__Enum creationOptions, CancellationToken ct));
IL2CPP_REGISTER_METHOD(0x02330D30, void, __ctor, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02330D40, void, __ctor, (Task * __this, Object * state, TaskCreationOptions__Enum creationOptions, bool promiseStyle));
IL2CPP_REGISTER_METHODINFO(0x04724848, Task__ctor_2__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02330E60, void, __ctor, (Task * __this, Delegate * action, Object * state, Task * parent, CancellationToken cancellationToken, TaskCreationOptions__Enum creationOptions, InternalTaskOptions__Enum internalOptions, TaskScheduler * scheduler));
IL2CPP_REGISTER_METHODINFO(0x0474C310, Task__ctor_3__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02330F90, void, TaskConstructorCore, (Task * __this, Object * action, Object * state, CancellationToken cancellationToken, TaskCreationOptions__Enum creationOptions, InternalTaskOptions__Enum internalOptions, TaskScheduler * scheduler));
IL2CPP_REGISTER_METHODINFO(0x0478C680, Task_TaskConstructorCore__MethodInfo);
IL2CPP_REGISTER_METHOD(0x023311C0, void, AssignCancellationToken, (Task * __this, CancellationToken cancellationToken, Task * antecedent, TaskContinuation * continuation));
IL2CPP_REGISTER_METHODINFO(0x04718700, Task_AssignCancellationToken__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02331610, void, TaskCancelCallback, (Object * o));
IL2CPP_REGISTER_METHODINFO(0x04730210, Task_TaskCancelCallback__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02331750, String *, get_DebuggerDisplayMethodDescription, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02331860, void, PossiblyCaptureContext, (Task * __this, StackCrawlMark__Enum * stackMark));
IL2CPP_REGISTER_METHOD(0x02331970, TaskCreationOptions__Enum, get_Options, (Task * __this));
IL2CPP_REGISTER_METHOD(0x015FAE60, TaskCreationOptions__Enum, OptionsMethod, (int32_t flags));
IL2CPP_REGISTER_METHOD(0x02331A10, bool, AtomicStateUpdate, (Task * __this, int32_t newBits, int32_t illegalBits));
IL2CPP_REGISTER_METHOD(0x02331B10, bool, AtomicStateUpdate, (Task * __this, int32_t newBits, int32_t illegalBits, int32_t * oldFlags));
IL2CPP_REGISTER_METHOD(0x02331C30, void, SetNotificationForWaitCompletion, (Task * __this, bool enabled));
IL2CPP_REGISTER_METHOD(0x02331D40, bool, NotifyDebuggerOfWaitCompletionIfNecessary, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02331D90, bool, AnyTaskRequiresNotifyDebuggerOfWaitCompletion, (Task__Array * tasks));
IL2CPP_REGISTER_METHOD(0x02331E20, bool, get_IsWaitNotificationEnabledOrNotRanToCompletion, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02331E40, bool, get_ShouldNotifyDebuggerOfWaitCompletion, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02331E40, bool, get_IsWaitNotificationEnabled, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02331E60, void, NotifyDebuggerOfWaitCompletion, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02331E90, bool, MarkStarted, (Task * __this));
IL2CPP_REGISTER_METHOD(0x00417870, bool, FireTaskScheduledIfNeeded, (Task * __this, TaskScheduler * ts));
IL2CPP_REGISTER_METHOD(0x02331EB0, void, AddNewChild, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02331F40, void, DisregardChild, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02331F80, Task *, InternalStartNew, (Task * creatingTask, Delegate * action, Object * state, CancellationToken cancellationToken, TaskScheduler * scheduler, TaskCreationOptions__Enum options, InternalTaskOptions__Enum internalOptions, StackCrawlMark__Enum * stackMark));
IL2CPP_REGISTER_METHODINFO(0x047374B8, Task_InternalStartNew__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02332190, int32_t, NewId, ());
IL2CPP_REGISTER_METHOD(0x02332250, int32_t, get_Id, (Task * __this));
IL2CPP_REGISTER_METHOD(0x023323B0, Task *, get_InternalCurrent, ());
IL2CPP_REGISTER_METHOD(0x02332490, Task *, InternalCurrentIfAttached, (TaskCreationOptions__Enum creationOptions));
IL2CPP_REGISTER_METHOD(0x02332540, StackGuard *, get_CurrentStackGuard, ());
IL2CPP_REGISTER_METHOD(0x02332740, AggregateException *, get_Exception, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02332770, TaskStatus__Enum, get_Status, (Task * __this));
IL2CPP_REGISTER_METHOD(0x023327D0, bool, get_IsCanceled, (Task * __this));
IL2CPP_REGISTER_METHOD(0x023327F0, bool, get_IsCancellationRequested, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02332830, Task_ContingentProperties *, EnsureContingentPropertiesInitialized, (Task * __this, bool needsProtection));
IL2CPP_REGISTER_METHOD(0x02332860, Task_ContingentProperties *, EnsureContingentPropertiesInitializedCore, (Task * __this, bool needsProtection));
IL2CPP_REGISTER_METHOD(0x02332A50, CancellationToken, get_CancellationToken, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02332A70, bool, get_IsCancellationAcknowledged, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02332A90, bool, get_IsCompleted, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02332B30, bool, IsCompletedMethod, (int32_t flags));
IL2CPP_REGISTER_METHOD(0x02332B40, bool, get_IsRanToCompletion, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02332B60, TaskCreationOptions__Enum, get_CreationOptions, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02332B80, WaitHandle *, IAsyncResult_get_AsyncWaitHandle, (Task * __this));
IL2CPP_REGISTER_METHODINFO(0x047329D8, Task_System_IAsyncResult_get_AsyncWaitHandle__MethodInfo);
IL2CPP_REGISTER_METHOD(0x002FB950, Object *, get_AsyncState, (Task * __this));
IL2CPP_REGISTER_METHOD(0x00417870, bool, IAsyncResult_get_CompletedSynchronously, (Task * __this));
IL2CPP_REGISTER_METHOD(0x002FBB00, TaskScheduler *, get_ExecutingTaskScheduler, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02332C90, TaskFactory *, get_Factory, ());
IL2CPP_REGISTER_METHOD(0x02332D30, Task *, get_CompletedTask, ());
IL2CPP_REGISTER_METHOD(0x02332F40, ManualResetEventSlim *, get_CompletedEvent, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02333160, bool, get_IsSelfReplicatingRoot, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02333180, bool, get_IsChildReplica, (Task * __this));
IL2CPP_REGISTER_METHOD(0x023331A0, bool, get_ExceptionRecorded, (Task * __this));
IL2CPP_REGISTER_METHOD(0x023331F0, bool, get_IsFaulted, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02333210, ExecutionContext *, get_CapturedContext, (Task * __this));
IL2CPP_REGISTER_METHOD(0x023332E0, void, set_CapturedContext, (Task * __this, ExecutionContext * value));
IL2CPP_REGISTER_METHOD(0x02333340, ExecutionContext *, CopyExecutionContext, (ExecutionContext * capturedContext));
IL2CPP_REGISTER_METHOD(0x02333400, void, Dispose, (Task * __this));
IL2CPP_REGISTER_METHOD(0x023334B0, void, Dispose, (Task * __this, bool disposing));
IL2CPP_REGISTER_METHODINFO(0x0478A6C0, Task_Dispose_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02333600, void, ScheduleAndStart, (Task * __this, bool needsProtection));
IL2CPP_REGISTER_METHODINFO(0x04729938, Task_ScheduleAndStart__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02333910, void, AddException, (Task * __this, Object * exceptionObject));
IL2CPP_REGISTER_METHOD(0x02333920, void, AddException, (Task * __this, Object * exceptionObject, bool representsCancellation));
IL2CPP_REGISTER_METHOD(0x02333CE0, AggregateException *, GetExceptions, (Task * __this, bool includeTaskCanceledExceptions));
IL2CPP_REGISTER_METHOD(0x02334030, ReadOnlyCollection_1_System_Runtime_ExceptionServices_ExceptionDispatchInfo_ *, GetExceptionDispatchInfos, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02334240, ExceptionDispatchInfo *, GetCancellationExceptionDispatchInfo, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02334270, void, ThrowIfExceptional, (Task * __this, bool includeTaskCanceledExceptions));
IL2CPP_REGISTER_METHODINFO(0x0475D9C8, Task_ThrowIfExceptional__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02334320, void, UpdateExceptionObservedStatus, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02334400, bool, get_IsExceptionObservedByParent, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02334420, bool, get_IsDelegateInvoked, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02334440, void, Finish, (Task * __this, bool bUserDelegateExecuted));
IL2CPP_REGISTER_METHOD(0x02334630, void, FinishStageTwo, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02334800, void, FinishStageThree, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02334860, void, ProcessChildCompletion, (Task * __this, Task * childTask));
IL2CPP_REGISTER_METHOD(0x02334B30, void, AddExceptionsFromChildren, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02334DE0, void, FinishThreadAbortedTask, (Task * __this, bool bTAEAddedToExceptionHolder, bool delegateRan));
IL2CPP_REGISTER_METHOD(0x02334E60, void, Execute, (Task * __this));
IL2CPP_REGISTER_METHOD(0x003FFDF0, bool, ShouldReplicate, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02334FF0, Task *, CreateReplicaTask, (Task * __this, Action_1_Object_ * taskReplicaDelegate, Object * stateObject, Task * parentTask, TaskScheduler * taskScheduler, TaskCreationOptions__Enum creationOptionsForReplica, InternalTaskOptions__Enum internalOptionsForReplica));
IL2CPP_REGISTER_METHOD(0x00420EE0, Object *, get_SavedStateForNextReplica, (Task * __this));
IL2CPP_REGISTER_METHOD(0x002FA000, void, set_SavedStateFromPreviousReplica, (Task * __this, Object * value));
IL2CPP_REGISTER_METHOD(0x00420EE0, Task *, get_HandedOverChildReplica, (Task * __this));
IL2CPP_REGISTER_METHOD(0x002FA000, void, set_HandedOverChildReplica, (Task * __this, Task * value));
IL2CPP_REGISTER_METHOD(0x02335190, void, ExecuteSelfReplicating, (Task * root));
IL2CPP_REGISTER_METHOD(0x02335400, void, IThreadPoolWorkItem_ExecuteWorkItem, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02335410, void, IThreadPoolWorkItem_MarkAborted, (Task * __this, ThreadAbortException * tae));
IL2CPP_REGISTER_METHOD(0x023354A0, bool, ExecuteEntry, (Task * __this, bool bPreventDoubleExecution));
IL2CPP_REGISTER_METHOD(0x023356A0, void, ExecuteWithThreadLocal, (Task * __this, Task * * currentTaskSlot));
IL2CPP_REGISTER_METHOD(0x023359C0, void, ExecutionContextCallback, (Object * obj));
IL2CPP_REGISTER_METHODINFO(0x04796D40, Task_ExecutionContextCallback__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02335AC0, void, InnerInvoke, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02335BA0, void, InnerInvokeWithArg, (Task * __this, Task * childTask));
IL2CPP_REGISTER_METHOD(0x02335BD0, void, HandleException, (Task * __this, Exception * unhandledException));
IL2CPP_REGISTER_METHOD(0x004C50A0, TaskAwaiter, GetAwaiter, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02335D60, ConfiguredTaskAwaitable, ConfigureAwait, (Task * __this, bool continueOnCapturedContext));
IL2CPP_REGISTER_METHOD(0x02335D90, void, SetContinuationForAwait, (Task * __this, Action * continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, StackCrawlMark__Enum * stackMark));
IL2CPP_REGISTER_METHOD(0x00417870, YieldAwaitable, Yield, ());
IL2CPP_REGISTER_METHOD(0x023361F0, void, Wait, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02336200, void, Wait, (Task * __this, CancellationToken cancellationToken));
IL2CPP_REGISTER_METHOD(0x02336210, bool, Wait, (Task * __this, int32_t millisecondsTimeout, CancellationToken cancellationToken));
IL2CPP_REGISTER_METHODINFO(0x04762320, Task_Wait_2__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02336370, bool, WrappedTryRunInline, (Task * __this));
IL2CPP_REGISTER_METHODINFO(0x0471FDB0, Task_WrappedTryRunInline__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02336490, bool, InternalWait, (Task * __this, int32_t millisecondsTimeout, CancellationToken cancellationToken));
IL2CPP_REGISTER_METHOD(0x02336600, bool, SpinThenBlockingWait, (Task * __this, int32_t millisecondsTimeout, CancellationToken cancellationToken));
IL2CPP_REGISTER_METHOD(0x02336A50, bool, SpinWait, (Task * __this, int32_t millisecondsTimeout));
IL2CPP_REGISTER_METHOD(0x02336AF0, bool, InternalCancel, (Task * __this, bool bCancelNonExecutingOnly));
IL2CPP_REGISTER_METHODINFO(0x04766CB8, Task_InternalCancel__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02336E20, void, RecordInternalCancellationRequest, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02336E60, void, RecordInternalCancellationRequest, (Task * __this, CancellationToken tokenToRecord));
IL2CPP_REGISTER_METHOD(0x02336F70, void, RecordInternalCancellationRequest, (Task * __this, CancellationToken tokenToRecord, Object * cancellationException));
IL2CPP_REGISTER_METHOD(0x023370A0, void, CancellationCleanupLogic, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02337220, void, SetCancellationAcknowledged, (Task * __this));
IL2CPP_REGISTER_METHOD(0x02337240, void, FinishContinuations, (Task * __this));
IL2CPP_REGISTER_METHOD(0x003F8E90, void, LogFinishCompletionNotification, (Task * __this));
IL2CPP_REGISTER_METHOD(0x023378D0, Task *, ContinueWith, (Task * __this, Action_1_System_Threading_Tasks_Task_ * continuationAction));
IL2CPP_REGISTER_METHOD(0x023379B0, Task *, ContinueWith, (Task * __this, Action_1_System_Threading_Tasks_Task_ * continuationAction, TaskScheduler * scheduler, CancellationToken cancellationToken, TaskContinuationOptions__Enum continuationOptions, StackCrawlMark__Enum * stackMark));
IL2CPP_REGISTER_METHODINFO(0x04793640, Task_ContinueWith_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02337C30, Task *, ContinueWith, (Task * __this, Action_2_System_Threading_Tasks_Task_Object_ * continuationAction, Object * state, CancellationToken cancellationToken, TaskContinuationOptions__Enum continuationOptions, TaskScheduler * scheduler));
IL2CPP_REGISTER_METHOD(0x02337C70, Task *, ContinueWith, (Task * __this, Action_2_System_Threading_Tasks_Task_Object_ * continuationAction, Object * state, TaskScheduler * scheduler, CancellationToken cancellationToken, TaskContinuationOptions__Enum continuationOptions, StackCrawlMark__Enum * stackMark));
IL2CPP_REGISTER_METHODINFO(0x047363B8, Task_ContinueWith_3__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02337EF0, void, CreationOptionsFromContinuationOptions, (TaskContinuationOptions__Enum continuationOptions, TaskCreationOptions__Enum * creationOptions, InternalTaskOptions__Enum * internalOptions));
IL2CPP_REGISTER_METHODINFO(0x04774558, Task_CreationOptionsFromContinuationOptions__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02338080, void, ContinueWithCore, (Task * __this, Task * continuationTask, TaskScheduler * scheduler, CancellationToken cancellationToken, TaskContinuationOptions__Enum options));
IL2CPP_REGISTER_METHOD(0x02338350, void, AddCompletionAction, (Task * __this, ITaskCompletionAction * action));
IL2CPP_REGISTER_METHOD(0x02338360, void, AddCompletionAction, (Task * __this, ITaskCompletionAction * action, bool addBeforeOthers));
IL2CPP_REGISTER_METHOD(0x02338420, bool, AddTaskContinuationComplex, (Task * __this, Object * tc, bool addBeforeOthers));
IL2CPP_REGISTER_METHOD(0x02338820, bool, AddTaskContinuation, (Task * __this, Object * tc, bool addBeforeOthers));
IL2CPP_REGISTER_METHOD(0x023388B0, void, RemoveContinuation, (Task * __this, Object * continuationObject));
IL2CPP_REGISTER_METHOD(0x02338C30, Task *, FromException, (Exception * exception));
IL2CPP_REGISTER_METHOD(0x02338CD0, Task *, FromCancellation, (CancellationToken cancellationToken));
IL2CPP_REGISTER_METHODINFO(0x047352C0, Task_FromCancellation__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02338E70, Task *, Run, (Action * action));
IL2CPP_REGISTER_METHOD(0x02338F80, Task *, Run, (Func_1_System_Threading_Tasks_Task_ * function));
IL2CPP_REGISTER_METHOD(0x02339030, Task *, Run, (Func_1_System_Threading_Tasks_Task_ * function, CancellationToken cancellationToken));
IL2CPP_REGISTER_METHODINFO(0x04768448, Task_Run_2__MethodInfo);
IL2CPP_REGISTER_METHOD(0x023392D0, Task *, Delay, (TimeSpan delay, CancellationToken cancellationToken));
IL2CPP_REGISTER_METHODINFO(0x0471A840, Task_Delay__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02339400, Task *, Delay, (int32_t millisecondsDelay));
IL2CPP_REGISTER_METHOD(0x023394B0, Task *, Delay, (int32_t millisecondsDelay, CancellationToken cancellationToken));
IL2CPP_REGISTER_METHODINFO(0x047239C8, Task_Delay_2__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02339BE0, Task *, WhenAll, (Task__Array * tasks));
IL2CPP_REGISTER_METHODINFO(0x04705620, Task_WhenAll__MethodInfo);
IL2CPP_REGISTER_METHOD(0x02339DD0, Task *, InternalWhenAll, (Task__Array * tasks));
IL2CPP_REGISTER_METHOD(0x02339F70, Task_1_Task_ *, WhenAny, (Task__Array * tasks));
IL2CPP_REGISTER_METHODINFO(0x0473E028, Task_WhenAny__MethodInfo);
IL2CPP_REGISTER_METHOD(0x0233A160, void, __cctor, ());
IL2CPP_REGISTER_METHOD(0x01544350, Task_1_System_Object_ *, FromResult, (Object * result));
IL2CPP_REGISTER_METHOD(0x01543DD0, Task_1_System_Object_ *, FromException, (Exception * exception));
IL2CPP_REGISTER_METHODINFO(0x0477FEE8, Task_FromException_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01543880, Task_1_System_Object_ *, FromCancellation, (CancellationToken cancellationToken));
IL2CPP_REGISTER_METHODINFO(0x04775770, Task_FromCancellation_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x015436B0, Task_1_System_Object_ *, FromCancellation, (OperationCanceledException * exception));
IL2CPP_REGISTER_METHODINFO(0x04773E30, Task_FromCancellation_2__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01544980, Task_1_System_Object_ *, Run, (Func_1_Object_ * function));
IL2CPP_REGISTER_METHOD(0x015445B0, Task_1_System_Object_ *, Run, (Func_1_System_Threading_Tasks_Task_1_ * function));
IL2CPP_REGISTER_METHOD(0x01544670, Task_1_System_Object_ *, Run, (Func_1_System_Threading_Tasks_Task_1_ * function, CancellationToken cancellationToken));
IL2CPP_REGISTER_METHODINFO(0x04715EF8, Task_Run_5__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01546050, Task_1_System_Object__1 *, WhenAll, (Task_1_System_Object___Array * tasks));
IL2CPP_REGISTER_METHODINFO(0x04703790, Task_WhenAll_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01545E10, Task_1_System_Object__1 *, InternalWhenAll, (Task_1_System_Object___Array * tasks));
IL2CPP_REGISTER_METHOD(0x015434F0, Task_1_System_Int32_ *, FromCancellation, (CancellationToken cancellationToken));
IL2CPP_REGISTER_METHODINFO(0x0470EE70, Task_FromCancellation_3__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01544250, Task_1_System_Int32_ *, FromResult, (int32_t result));
IL2CPP_REGISTER_METHODINFO(0x04721D48, Task_FromResult_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01543320, Task_1_System_Int32_ *, FromCancellation, (OperationCanceledException * exception));
IL2CPP_REGISTER_METHODINFO(0x0472DD98, Task_FromCancellation_4__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01543C10, Task_1_System_Int32_ *, FromException, (Exception * exception));
IL2CPP_REGISTER_METHODINFO(0x0476BFD0, Task_FromException_2__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01543A40, Task_1_VoidTaskResult_ *, FromCancellation, (OperationCanceledException * exception));
IL2CPP_REGISTER_METHODINFO(0x047057C0, Task_FromCancellation_5__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01543160, Task_1_System_Boolean_ *, FromCancellation, (CancellationToken cancellationToken));
IL2CPP_REGISTER_METHODINFO(0x04782078, Task_FromCancellation_6__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01543F90, Task_1_VoidTaskResult_ *, FromException, (Exception * exception));
IL2CPP_REGISTER_METHODINFO(0x04703BB8, Task_FromException_3__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01544450, Task_1_System_Int32_ *, Run, (Func_1_Int32_ * function));
IL2CPP_REGISTER_METHODINFO(0x0477FDF0, Task_Run_6__MethodInfo);
IL2CPP_REGISTER_METHOD(0x015445B0, Task_1_System_IO_Stream_ *, Run, (Func_1_System_Threading_Tasks_Task_1__1 * function));
IL2CPP_REGISTER_METHODINFO(0x0471D0D8, Task_Run_7__MethodInfo);
IL2CPP_REGISTER_METHOD(0x015445B0, Task_1_System_Net_WebResponse_ *, Run, (Func_1_System_Threading_Tasks_Task_1__2 * function));
IL2CPP_REGISTER_METHODINFO(0x047044C8, Task_Run_8__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01544150, Task_1_System_Boolean_ *, FromResult, (bool result));
IL2CPP_REGISTER_METHODINFO(0x04790D98, Task_FromResult_2__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01544980, Task_1_System_IO_Stream_ *, Run, (Func_1_System_IO_Stream_ * function));
IL2CPP_REGISTER_METHODINFO(0x0477B208, Task_Run_9__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01544350, Task_1_System_Tuple_4_ *, FromResult, (Tuple_4_Int32_Int32_Int32_Boolean_ * result));
IL2CPP_REGISTER_METHODINFO(0x0476FE50, Task_FromResult_3__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01546050, Task_1_SystemIntegration_Races_RaceRequestResultEntry__1 *, WhenAll, (Task_1_SystemIntegration_Races_RaceRequestResultEntry___Array * tasks));
IL2CPP_REGISTER_METHODINFO(0x0471BA78, Task_WhenAll_2__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01544350, Task_1_System_Byte_ *, FromResult, (Byte__Array * result));
IL2CPP_REGISTER_METHODINFO(0x047233B8, Task_FromResult_4__MethodInfo);
}
