#include <interception_macros.h>

namespace app::methods::System::Linq::Expressions::Interpreter::LightCompiler {
IL2CPP_REGISTER_METHOD(0x01CEBBD0, void, __ctor, (LightCompiler * __this));
IL2CPP_REGISTER_METHOD(0x01CEC400, void, __ctor, (LightCompiler * __this, LightCompiler * parent));
IL2CPP_REGISTER_METHOD(0x002FA280, InstructionList *, get_Instructions, (LightCompiler * __this));
IL2CPP_REGISTER_METHOD(0x01CEC430, LightDelegateCreator *, CompileTop, (LightCompiler * __this, LambdaExpression * node));
IL2CPP_REGISTER_METHOD(0x01CEC7C0, Interpreter *, MakeInterpreter, (LightCompiler * __this, String * lambdaName));
IL2CPP_REGISTER_METHOD(0x01CECD40, void, CompileConstantExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CECE50, void, CompileDefaultExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CECFE0, void, CompileDefaultExpression, (LightCompiler * __this, Type * type));
IL2CPP_REGISTER_METHOD(0x01CED140, LocalVariable *, EnsureAvailableForClosure, (LightCompiler * __this, ParameterExpression * expr));
IL2CPP_REGISTER_METHODINFO(0x04736970, LightCompiler_EnsureAvailableForClosure__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CED2B0, LocalVariable *, ResolveLocal, (LightCompiler * __this, ParameterExpression * variable));
IL2CPP_REGISTER_METHOD(0x01CED320, void, CompileGetVariable, (LightCompiler * __this, ParameterExpression * variable));
IL2CPP_REGISTER_METHOD(0x01CED470, void, EmitCopyValueType, (LightCompiler * __this, Type * valueType));
IL2CPP_REGISTER_METHOD(0x01CED590, void, LoadLocalNoValueTypeCopy, (LightCompiler * __this, ParameterExpression * variable));
IL2CPP_REGISTER_METHOD(0x01CED720, bool, MaybeMutableValueType, (LightCompiler * __this, Type * type));
IL2CPP_REGISTER_METHOD(0x01CED790, void, CompileGetBoxedVariable, (LightCompiler * __this, ParameterExpression * variable));
IL2CPP_REGISTER_METHOD(0x01CED840, void, CompileSetVariable, (LightCompiler * __this, ParameterExpression * variable, bool isVoid));
IL2CPP_REGISTER_METHOD(0x01CEDAB0, void, CompileParameterExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CEDB90, void, CompileBlockExpression, (LightCompiler * __this, Expression * expr, bool asVoid));
IL2CPP_REGISTER_METHOD(0x01CEDE80, LocalDefinition__Array *, CompileBlockStart, (LightCompiler * __this, BlockExpression * node));
IL2CPP_REGISTER_METHOD(0x01CEE3B0, void, CompileBlockEnd, (LightCompiler * __this, LocalDefinition__Array * locals));
IL2CPP_REGISTER_METHOD(0x01CEE500, void, CompileIndexExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CEE620, void, EmitIndexGet, (LightCompiler * __this, IndexExpression * index));
IL2CPP_REGISTER_METHOD(0x01CEE780, void, CompileIndexAssignment, (LightCompiler * __this, BinaryExpression * node, bool asVoid));
IL2CPP_REGISTER_METHOD(0x01CEECA0, void, CompileMemberAssignment, (LightCompiler * __this, BinaryExpression * node, bool asVoid));
IL2CPP_REGISTER_METHOD(0x01CEEDF0, void, CompileMemberAssignment, (LightCompiler * __this, bool asVoid, MemberInfo_1 * refMember, Expression * value, bool forBinding));
IL2CPP_REGISTER_METHODINFO(0x0477FCF8, LightCompiler_CompileMemberAssignment_1__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CEF400, void, CompileVariableAssignment, (LightCompiler * __this, BinaryExpression * node, bool asVoid));
IL2CPP_REGISTER_METHOD(0x01CEF510, void, CompileAssignBinaryExpression, (LightCompiler * __this, Expression * expr, bool asVoid));
IL2CPP_REGISTER_METHODINFO(0x04707A90, LightCompiler_CompileAssignBinaryExpression__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CEF870, void, CompileBinaryExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHODINFO(0x0477D8F8, LightCompiler_CompileBinaryExpression__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CF0A90, void, CompileEqual, (LightCompiler * __this, Expression * left, Expression * right, bool liftedToNull));
IL2CPP_REGISTER_METHOD(0x01CF0B30, void, CompileNotEqual, (LightCompiler * __this, Expression * left, Expression * right, bool liftedToNull));
IL2CPP_REGISTER_METHOD(0x01CF0BD0, void, CompileComparison, (LightCompiler * __this, BinaryExpression * node));
IL2CPP_REGISTER_METHODINFO(0x04795FE8, LightCompiler_CompileComparison__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CF0E50, void, CompileArithmetic, (LightCompiler * __this, ExpressionType__Enum nodeType, Expression * left, Expression * right));
IL2CPP_REGISTER_METHODINFO(0x0476B860, LightCompiler_CompileArithmetic__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CF1180, void, CompileConvertUnaryExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CF1880, void, CompileConvertToType, (LightCompiler * __this, Type * typeFrom, Type * typeTo, bool isChecked, bool isLiftedToNull));
IL2CPP_REGISTER_METHOD(0x01CF22D0, void, CompileNotExpression, (LightCompiler * __this, UnaryExpression * node));
IL2CPP_REGISTER_METHOD(0x01CF2350, void, CompileUnaryExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHODINFO(0x04785A90, LightCompiler_CompileUnaryExpression__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CF2790, void, EmitUnaryMethodCall, (LightCompiler * __this, UnaryExpression * node));
IL2CPP_REGISTER_METHOD(0x01CF28F0, void, EmitUnaryBoolCheck, (LightCompiler * __this, UnaryExpression * node));
IL2CPP_REGISTER_METHOD(0x01CF2BA0, void, CompileAndAlsoBinaryExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CF2C80, void, CompileOrElseBinaryExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CF2D60, void, CompileLogicalBinaryExpression, (LightCompiler * __this, BinaryExpression * b, bool andAlso));
IL2CPP_REGISTER_METHOD(0x01CF2F10, void, CompileMethodLogicalBinaryExpression, (LightCompiler * __this, BinaryExpression * expr, bool andAlso));
IL2CPP_REGISTER_METHOD(0x01CF30F0, void, CompileLiftedLogicalBinaryExpression, (LightCompiler * __this, BinaryExpression * node, bool andAlso));
IL2CPP_REGISTER_METHOD(0x01CF3B60, void, CompileUnliftedLogicalBinaryExpression, (LightCompiler * __this, BinaryExpression * expr, bool andAlso));
IL2CPP_REGISTER_METHOD(0x01CF3CE0, void, CompileConditionalExpression, (LightCompiler * __this, Expression * expr, bool asVoid));
IL2CPP_REGISTER_METHOD(0x01CF4050, void, CompileLoopExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CF42E0, void, CompileSwitchExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CF4BD0, void, CompileStringSwitchExpression, (LightCompiler * __this, SwitchExpression * node));
IL2CPP_REGISTER_METHOD(0x01CF54F0, void, CompileLabelExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CF5760, void, CompileGotoExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CF5A50, void, PushLabelBlock, (LightCompiler * __this, LabelScopeKind__Enum type));
IL2CPP_REGISTER_METHOD(0x01CF5BB0, void, PopLabelBlock, (LightCompiler * __this, LabelScopeKind__Enum kind));
IL2CPP_REGISTER_METHOD(0x01CF5BD0, LabelInfo *, EnsureLabel, (LightCompiler * __this, LabelTarget * node));
IL2CPP_REGISTER_METHOD(0x01CF5D80, LabelInfo *, ReferenceLabel, (LightCompiler * __this, LabelTarget * node));
IL2CPP_REGISTER_METHOD(0x01CF5E60, LabelInfo *, DefineLabel, (LightCompiler * __this, LabelTarget * node));
IL2CPP_REGISTER_METHOD(0x01CF5FF0, bool, TryPushLabelBlock, (LightCompiler * __this, Expression * node));
IL2CPP_REGISTER_METHOD(0x01CF6440, void, DefineBlockLabels, (LightCompiler * __this, Expression * node));
IL2CPP_REGISTER_METHOD(0x01CF6650, void, CheckRethrow, (LightCompiler * __this));
IL2CPP_REGISTER_METHODINFO(0x0476D660, LightCompiler_CheckRethrow__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CF6700, void, CompileThrowUnaryExpression, (LightCompiler * __this, Expression * expr, bool asVoid));
IL2CPP_REGISTER_METHOD(0x01CF6B90, void, CompileTryExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CF7C70, void, CompileTryFaultExpression, (LightCompiler * __this, TryExpression * expr));
IL2CPP_REGISTER_METHOD(0x01CF8150, void, CompileMethodCallExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CF8260, void, CompileMethodCallExpression, (LightCompiler * __this, Expression * object, MethodInfo_1 * method_1, IArgumentProvider * arguments));
IL2CPP_REGISTER_METHOD(0x01CF88A0, ByRefUpdater *, CompileArrayIndexAddress, (LightCompiler * __this, Expression * array, Expression * index, int32_t argumentIndex));
IL2CPP_REGISTER_METHOD(0x01CF8BF0, void, EmitThisForMethodCall, (LightCompiler * __this, Expression * node));
IL2CPP_REGISTER_METHOD(0x01CF8C00, bool, ShouldWritebackNode, (Expression * node));
IL2CPP_REGISTER_METHOD(0x01CF8DE0, ByRefUpdater *, CompileAddress, (LightCompiler * __this, Expression * node, int32_t index));
IL2CPP_REGISTER_METHOD(0x01CF99E0, ByRefUpdater *, CompileMultiDimArrayAccess, (LightCompiler * __this, Expression * array, IArgumentProvider * arguments, int32_t index));
IL2CPP_REGISTER_METHOD(0x01CF9E80, void, CompileNewExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHODINFO(0x04761F58, LightCompiler_CompileNewExpression__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CFA5A0, void, CompileMemberExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFA6A0, void, CompileMember, (LightCompiler * __this, Expression * from, MemberInfo_1 * member, bool forBinding));
IL2CPP_REGISTER_METHODINFO(0x0470DBB0, LightCompiler_CompileMember__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CFAA30, void, CompileNewArrayExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFB0A0, void, CompileDebugInfoExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFB2F0, void, CompileRuntimeVariablesExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFB720, void, CompileLambdaExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFBB70, void, CompileCoalesceBinaryExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFC0B0, void, CompileInvocationExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFC340, void, CompileListInitExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFC410, void, CompileListInit, (LightCompiler * __this, ReadOnlyCollection_1_System_Linq_Expressions_ElementInit_ * initializers));
IL2CPP_REGISTER_METHOD(0x01CFC760, void, CompileMemberInitExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFC830, void, CompileMemberInit, (LightCompiler * __this, ReadOnlyCollection_1_System_Linq_Expressions_MemberBinding_ * bindings));
IL2CPP_REGISTER_METHODINFO(0x04750238, LightCompiler_CompileMemberInit__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CFCC70, Type *, GetMemberType, (MemberInfo_1 * member));
IL2CPP_REGISTER_METHODINFO(0x04713040, LightCompiler_GetMemberType__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01CFCDD0, void, CompileQuoteUnaryExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFD310, void, CompileUnboxUnaryExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFD480, void, CompileTypeEqualExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFD670, void, CompileTypeAsExpression, (LightCompiler * __this, UnaryExpression * node));
IL2CPP_REGISTER_METHOD(0x01CFD810, void, CompileTypeIsExpression, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFDBC0, void, Compile, (LightCompiler * __this, Expression * expr, bool asVoid));
IL2CPP_REGISTER_METHOD(0x01CFDBE0, void, CompileAsVoid, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFDDB0, void, CompileNoLabelPush, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFE950, void, Compile, (LightCompiler * __this, Expression * expr));
IL2CPP_REGISTER_METHOD(0x01CFE9B0, void, __cctor, ());
IL2CPP_REGISTER_METHOD(0x01AF07C0, void, CompileIntSwitchExpression, (LightCompiler * __this, SwitchExpression * node));
IL2CPP_REGISTER_METHODINFO(0x04711168, LightCompiler_CompileIntSwitchExpression__MethodInfo);
IL2CPP_REGISTER_METHOD(0x01AF00A0, void, CompileIntSwitchExpression, (LightCompiler * __this, SwitchExpression * node));
IL2CPP_REGISTER_METHODINFO(0x04748B98, LightCompiler_CompileIntSwitchExpression_1__MethodInfo);
}
