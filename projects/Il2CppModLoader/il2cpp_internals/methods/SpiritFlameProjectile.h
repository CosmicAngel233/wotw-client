using namespace app;

namespace app::methods::SpiritFlameProjectile {
IL2CPP_REGISTER_METHOD(0x011D4750, bool, get_IsSuspended, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D4760, void, set_IsSuspended, (SpiritFlameProjectile * __this, bool value));
IL2CPP_REGISTER_METHOD(0x0062C500, SuspendableMask__Enum, get_Mask, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x0062C510, void, set_Mask, (SpiritFlameProjectile * __this, SuspendableMask__Enum value));
IL2CPP_REGISTER_METHOD(0x002FBCE0, Transform *, get_StartTarget, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x002FBCF0, void, set_StartTarget, (SpiritFlameProjectile * __this, Transform * value));
IL2CPP_REGISTER_METHOD(0x002FBD00, SeinCharacter *, get_Sein, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x002FBD10, void, set_Sein, (SpiritFlameProjectile * __this, SeinCharacter * value));
IL2CPP_REGISTER_METHOD(0x002FBD20, Transform *, get_AttackableTargetTransform, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x002FBD30, void, set_AttackableTargetTransform, (SpiritFlameProjectile * __this, Transform * value));
IL2CPP_REGISTER_METHOD(0x002FBD40, IAttackable *, get_AttackableTarget, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x002FBD50, void, set_AttackableTarget, (SpiritFlameProjectile * __this, IAttackable * value));
IL2CPP_REGISTER_METHOD(0x011D4770, Vector3, get_StartPosition, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D4790, void, set_StartPosition, (SpiritFlameProjectile * __this, Vector3 value));
IL2CPP_REGISTER_METHOD(0x005B0220, SpiritFlame *, get_SpiritFlame, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x00A2A740, void, set_SpiritFlame, (SpiritFlameProjectile * __this, SpiritFlame * value));
IL2CPP_REGISTER_METHOD(0x011D47B0, float, get_Damage, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D47C0, void, set_Damage, (SpiritFlameProjectile * __this, float value));
IL2CPP_REGISTER_METHOD(0x010B5C80, DamageWeight__Enum, get_DamageWeight, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D47D0, void, set_DamageWeight, (SpiritFlameProjectile * __this, DamageWeight__Enum value));
IL2CPP_REGISTER_METHOD(0x00875720, bool, get_PreventKickback, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x00FD90B0, void, set_PreventKickback, (SpiritFlameProjectile * __this, bool value));
IL2CPP_REGISTER_METHOD(0x011D47E0, void, PlayThrowSound, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D4A50, void, PlayHitSound, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D4CC0, void, Awake, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D4E80, void, OnDestroy, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D4F20, void, OnPoolSpawned, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D5060, void, Start, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011976A0, void, ChangeState, (SpiritFlameProjectile * __this, SpiritFlameProjectile_State__Enum state));
IL2CPP_REGISTER_METHOD(0x011D5A60, bool, TargetHasMovedTooMuch, (SpiritFlameProjectile * __this, Vector3 newPos));
IL2CPP_REGISTER_METHOD(0x011D5B70, void, UpdateTargetPosition, (SpiritFlameProjectile * __this, Vector3 newPos));
IL2CPP_REGISTER_METHOD(0x011D5B90, float, GetArcFrac, (SpiritFlameProjectile * __this, int32_t pointIndex, int32_t numberOfPoints));
IL2CPP_REGISTER_METHOD(0x011D5BB0, void, UpdateArcUnitVectors, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D5D80, Vector3, GetPointOnArc, (SpiritFlameProjectile * __this, float frac, float curve));
IL2CPP_REGISTER_METHOD(0x011D5FA0, Vector3, GetPointOnArc, (SpiritFlameProjectile * __this, SpiritFlameProjectile_PointOnArc poa));
IL2CPP_REGISTER_METHOD(0x011D5FF0, Vector2, GetPointOnArcDelta, (SpiritFlameProjectile * __this, SpiritFlameProjectile_PointOnArc startPOA, SpiritFlameProjectile_PointOnArc endPOA));
IL2CPP_REGISTER_METHOD(0x011D61E0, SpiritFlameProjectile_PointOnArc, CachePointOnArc, (SpiritFlameProjectile * __this, int32_t pointIndex, int32_t numberOfPoints));
IL2CPP_REGISTER_METHOD(0x011D6270, SpiritFlameProjectile_PointOnArc, CachePointOnArc, (SpiritFlameProjectile * __this, float r));
IL2CPP_REGISTER_METHOD(0x011D62F0, void, CachePointsOnArc, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D6400, Vector2, GetHitVector, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D6440, void, UpdateLineRenderer, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D6D50, void, UpdateState, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D7860, void, DamageTicked, (SpiritFlameProjectile * __this, DamageResult damageResult));
IL2CPP_REGISTER_METHODINFO(0x0477AC40, SpiritFlameProjectile_DamageTicked__MethodInfo);
IL2CPP_REGISTER_METHOD(0x011D79E0, void, Detonate, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D7DE0, void, Discharge, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D7DF0, bool, RayTest, (SpiritFlameProjectile * __this, GameObject * target));
IL2CPP_REGISTER_METHOD(0x011D81A0, ISpiritFlameAttackable *, IsShootableTarget, (SpiritFlameProjectile * __this, Collider * target));
IL2CPP_REGISTER_METHOD(0x011D8580, void, FixedUpdate, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D88D0, void, __ctor, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHOD(0x011D8B00, void, __cctor, (MethodInfo * method));
IL2CPP_REGISTER_METHOD(0x01032B30, void, _Detonate_b__106_0, (SpiritFlameProjectile * __this));
IL2CPP_REGISTER_METHODINFO(0x04703680, SpiritFlameProjectile__Detonate_b__106_0__MethodInfo);
}
