using namespace app;

namespace app::methods::UnityEngine::ConfigurableJoint {
IL2CPP_REGISTER_METHOD(0x030A0540, Vector3, get_secondaryAxis, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A05C0, void, set_secondaryAxis, (ConfigurableJoint * __this, Vector3 value));
IL2CPP_REGISTER_METHOD(0x030A0620, ConfigurableJointMotion__Enum, get_xMotion, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0670, void, set_xMotion, (ConfigurableJoint * __this, ConfigurableJointMotion__Enum value));
IL2CPP_REGISTER_METHOD(0x030A06D0, ConfigurableJointMotion__Enum, get_yMotion, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0720, void, set_yMotion, (ConfigurableJoint * __this, ConfigurableJointMotion__Enum value));
IL2CPP_REGISTER_METHOD(0x030A0780, ConfigurableJointMotion__Enum, get_zMotion, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A07D0, void, set_zMotion, (ConfigurableJoint * __this, ConfigurableJointMotion__Enum value));
IL2CPP_REGISTER_METHOD(0x030A0830, ConfigurableJointMotion__Enum, get_angularXMotion, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0880, void, set_angularXMotion, (ConfigurableJoint * __this, ConfigurableJointMotion__Enum value));
IL2CPP_REGISTER_METHOD(0x030A08E0, ConfigurableJointMotion__Enum, get_angularYMotion, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0930, void, set_angularYMotion, (ConfigurableJoint * __this, ConfigurableJointMotion__Enum value));
IL2CPP_REGISTER_METHOD(0x030A0990, ConfigurableJointMotion__Enum, get_angularZMotion, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A09E0, void, set_angularZMotion, (ConfigurableJoint * __this, ConfigurableJointMotion__Enum value));
IL2CPP_REGISTER_METHOD(0x030A0A40, SoftJointLimitSpring, get_linearLimitSpring, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0AB0, void, set_linearLimitSpring, (ConfigurableJoint * __this, SoftJointLimitSpring value));
IL2CPP_REGISTER_METHOD(0x030A0B10, SoftJointLimitSpring, get_angularXLimitSpring, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0B80, void, set_angularXLimitSpring, (ConfigurableJoint * __this, SoftJointLimitSpring value));
IL2CPP_REGISTER_METHOD(0x030A0BE0, SoftJointLimitSpring, get_angularYZLimitSpring, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0C50, void, set_angularYZLimitSpring, (ConfigurableJoint * __this, SoftJointLimitSpring value));
IL2CPP_REGISTER_METHOD(0x030A0CB0, SoftJointLimit, get_linearLimit, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0D30, void, set_linearLimit, (ConfigurableJoint * __this, SoftJointLimit value));
IL2CPP_REGISTER_METHOD(0x030A0D90, SoftJointLimit, get_lowAngularXLimit, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0E10, void, set_lowAngularXLimit, (ConfigurableJoint * __this, SoftJointLimit value));
IL2CPP_REGISTER_METHOD(0x030A0E70, SoftJointLimit, get_highAngularXLimit, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0EF0, void, set_highAngularXLimit, (ConfigurableJoint * __this, SoftJointLimit value));
IL2CPP_REGISTER_METHOD(0x030A0F50, SoftJointLimit, get_angularYLimit, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A0FD0, void, set_angularYLimit, (ConfigurableJoint * __this, SoftJointLimit value));
IL2CPP_REGISTER_METHOD(0x030A1030, SoftJointLimit, get_angularZLimit, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A10B0, void, set_angularZLimit, (ConfigurableJoint * __this, SoftJointLimit value));
IL2CPP_REGISTER_METHOD(0x030A1110, Vector3, get_targetPosition, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1190, void, set_targetPosition, (ConfigurableJoint * __this, Vector3 value));
IL2CPP_REGISTER_METHOD(0x030A11F0, Vector3, get_targetVelocity, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1270, void, set_targetVelocity, (ConfigurableJoint * __this, Vector3 value));
IL2CPP_REGISTER_METHOD(0x030A12D0, JointDrive, get_xDrive, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1350, void, set_xDrive, (ConfigurableJoint * __this, JointDrive value));
IL2CPP_REGISTER_METHOD(0x030A13B0, JointDrive, get_yDrive, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1430, void, set_yDrive, (ConfigurableJoint * __this, JointDrive value));
IL2CPP_REGISTER_METHOD(0x030A1490, JointDrive, get_zDrive, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1510, void, set_zDrive, (ConfigurableJoint * __this, JointDrive value));
IL2CPP_REGISTER_METHOD(0x030A1570, Quaternion, get_targetRotation, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A15F0, void, set_targetRotation, (ConfigurableJoint * __this, Quaternion value));
IL2CPP_REGISTER_METHOD(0x030A1650, Vector3, get_targetAngularVelocity, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A16D0, void, set_targetAngularVelocity, (ConfigurableJoint * __this, Vector3 value));
IL2CPP_REGISTER_METHOD(0x030A1730, RotationDriveMode__Enum, get_rotationDriveMode, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1780, void, set_rotationDriveMode, (ConfigurableJoint * __this, RotationDriveMode__Enum value));
IL2CPP_REGISTER_METHOD(0x030A17E0, JointDrive, get_angularXDrive, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1860, void, set_angularXDrive, (ConfigurableJoint * __this, JointDrive value));
IL2CPP_REGISTER_METHOD(0x030A18C0, JointDrive, get_angularYZDrive, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1940, void, set_angularYZDrive, (ConfigurableJoint * __this, JointDrive value));
IL2CPP_REGISTER_METHOD(0x030A19A0, JointDrive, get_slerpDrive, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1A20, void, set_slerpDrive, (ConfigurableJoint * __this, JointDrive value));
IL2CPP_REGISTER_METHOD(0x030A1A80, JointProjectionMode__Enum, get_projectionMode, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1AD0, void, set_projectionMode, (ConfigurableJoint * __this, JointProjectionMode__Enum value));
IL2CPP_REGISTER_METHOD(0x030A1B30, float, get_projectionDistance, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1B80, void, set_projectionDistance, (ConfigurableJoint * __this, float value));
IL2CPP_REGISTER_METHOD(0x030A1BE0, float, get_projectionAngle, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1C30, void, set_projectionAngle, (ConfigurableJoint * __this, float value));
IL2CPP_REGISTER_METHOD(0x030A1C90, bool, get_configuredInWorldSpace, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1CE0, void, set_configuredInWorldSpace, (ConfigurableJoint * __this, bool value));
IL2CPP_REGISTER_METHOD(0x030A1D40, bool, get_swapBodies, (ConfigurableJoint * __this));
IL2CPP_REGISTER_METHOD(0x030A1D90, void, set_swapBodies, (ConfigurableJoint * __this, bool value));
IL2CPP_REGISTER_METHOD(0x030A1DF0, void, SetTentacleAnchorsBatched, (ConfigurableJoint__Array * joints, Vector3__Array * anchors));
IL2CPP_REGISTER_METHOD(0x030A1E70, void, Internal_SetTentacleAnchorsBatched, (ConfigurableJoint__Array * joints, Vector3__Array * anchors));
IL2CPP_REGISTER_METHOD(0x030A1ED0, void, get_secondaryAxis_Injected, (ConfigurableJoint * __this, Vector3 * ret));
IL2CPP_REGISTER_METHOD(0x030A1F30, void, set_secondaryAxis_Injected, (ConfigurableJoint * __this, Vector3 * value));
IL2CPP_REGISTER_METHOD(0x030A1F90, void, get_linearLimitSpring_Injected, (ConfigurableJoint * __this, SoftJointLimitSpring * ret));
IL2CPP_REGISTER_METHOD(0x030A1FF0, void, set_linearLimitSpring_Injected, (ConfigurableJoint * __this, SoftJointLimitSpring * value));
IL2CPP_REGISTER_METHOD(0x030A2050, void, get_angularXLimitSpring_Injected, (ConfigurableJoint * __this, SoftJointLimitSpring * ret));
IL2CPP_REGISTER_METHOD(0x030A20B0, void, set_angularXLimitSpring_Injected, (ConfigurableJoint * __this, SoftJointLimitSpring * value));
IL2CPP_REGISTER_METHOD(0x030A2110, void, get_angularYZLimitSpring_Injected, (ConfigurableJoint * __this, SoftJointLimitSpring * ret));
IL2CPP_REGISTER_METHOD(0x030A2170, void, set_angularYZLimitSpring_Injected, (ConfigurableJoint * __this, SoftJointLimitSpring * value));
IL2CPP_REGISTER_METHOD(0x030A21D0, void, get_linearLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * ret));
IL2CPP_REGISTER_METHOD(0x030A2230, void, set_linearLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * value));
IL2CPP_REGISTER_METHOD(0x030A2290, void, get_lowAngularXLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * ret));
IL2CPP_REGISTER_METHOD(0x030A22F0, void, set_lowAngularXLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * value));
IL2CPP_REGISTER_METHOD(0x030A2350, void, get_highAngularXLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * ret));
IL2CPP_REGISTER_METHOD(0x030A23B0, void, set_highAngularXLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * value));
IL2CPP_REGISTER_METHOD(0x030A2410, void, get_angularYLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * ret));
IL2CPP_REGISTER_METHOD(0x030A2470, void, set_angularYLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * value));
IL2CPP_REGISTER_METHOD(0x030A24D0, void, get_angularZLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * ret));
IL2CPP_REGISTER_METHOD(0x030A2530, void, set_angularZLimit_Injected, (ConfigurableJoint * __this, SoftJointLimit * value));
IL2CPP_REGISTER_METHOD(0x030A2590, void, get_targetPosition_Injected, (ConfigurableJoint * __this, Vector3 * ret));
IL2CPP_REGISTER_METHOD(0x030A25F0, void, set_targetPosition_Injected, (ConfigurableJoint * __this, Vector3 * value));
IL2CPP_REGISTER_METHOD(0x030A2650, void, get_targetVelocity_Injected, (ConfigurableJoint * __this, Vector3 * ret));
IL2CPP_REGISTER_METHOD(0x030A26B0, void, set_targetVelocity_Injected, (ConfigurableJoint * __this, Vector3 * value));
IL2CPP_REGISTER_METHOD(0x030A2710, void, get_xDrive_Injected, (ConfigurableJoint * __this, JointDrive * ret));
IL2CPP_REGISTER_METHOD(0x030A2770, void, set_xDrive_Injected, (ConfigurableJoint * __this, JointDrive * value));
IL2CPP_REGISTER_METHOD(0x030A27D0, void, get_yDrive_Injected, (ConfigurableJoint * __this, JointDrive * ret));
IL2CPP_REGISTER_METHOD(0x030A2830, void, set_yDrive_Injected, (ConfigurableJoint * __this, JointDrive * value));
IL2CPP_REGISTER_METHOD(0x030A2890, void, get_zDrive_Injected, (ConfigurableJoint * __this, JointDrive * ret));
IL2CPP_REGISTER_METHOD(0x030A28F0, void, set_zDrive_Injected, (ConfigurableJoint * __this, JointDrive * value));
IL2CPP_REGISTER_METHOD(0x030A2950, void, get_targetRotation_Injected, (ConfigurableJoint * __this, Quaternion * ret));
IL2CPP_REGISTER_METHOD(0x030A29B0, void, set_targetRotation_Injected, (ConfigurableJoint * __this, Quaternion * value));
IL2CPP_REGISTER_METHOD(0x030A2A10, void, get_targetAngularVelocity_Injected, (ConfigurableJoint * __this, Vector3 * ret));
IL2CPP_REGISTER_METHOD(0x030A2A70, void, set_targetAngularVelocity_Injected, (ConfigurableJoint * __this, Vector3 * value));
IL2CPP_REGISTER_METHOD(0x030A2AD0, void, get_angularXDrive_Injected, (ConfigurableJoint * __this, JointDrive * ret));
IL2CPP_REGISTER_METHOD(0x030A2B30, void, set_angularXDrive_Injected, (ConfigurableJoint * __this, JointDrive * value));
IL2CPP_REGISTER_METHOD(0x030A2B90, void, get_angularYZDrive_Injected, (ConfigurableJoint * __this, JointDrive * ret));
IL2CPP_REGISTER_METHOD(0x030A2BF0, void, set_angularYZDrive_Injected, (ConfigurableJoint * __this, JointDrive * value));
IL2CPP_REGISTER_METHOD(0x030A2C50, void, get_slerpDrive_Injected, (ConfigurableJoint * __this, JointDrive * ret));
IL2CPP_REGISTER_METHOD(0x030A2CB0, void, set_slerpDrive_Injected, (ConfigurableJoint * __this, JointDrive * value));
}
