#include <interception_macros.h>

namespace app::methods::Swing::Angle {
    IL2CPP_REGISTER_METHOD(0x0010FDD0, float, get_rad, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x00114F30, void, set_rad, (app::Angle__Boxed * this_ptr, float value));
    IL2CPP_REGISTER_METHOD(0x0014A2A0, float, get_deg, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A2B0, void, set_deg, (app::Angle__Boxed * this_ptr, float value));
    IL2CPP_REGISTER_METHOD(0x00114F30, void, __ctor_1, (app::Angle__Boxed * this_ptr, float _radians));
    IL2CPP_REGISTER_METHOD(0x0014A2C0, void, __ctor_2, (app::Angle__Boxed * this_ptr, float _degrees_or_radians, bool _degrees));
    IL2CPP_REGISTER_METHOD(0x0014A2E0, void, __ctor_3, (app::Angle__Boxed * this_ptr, app::Vector2 _normalized_dir));
    IL2CPP_REGISTER_METHOD(0x01829BE0, Angle, fromRadians, (float _radians));
    IL2CPP_REGISTER_METHOD(0x01829BF0, Angle, fromDegrees, (float _degrees));
    IL2CPP_REGISTER_METHOD(0x01829C00, Angle, fromDirection, (app::Vector2 _normalized_dir));
    IL2CPP_REGISTER_METHOD(0x01829CB0, Angle, fromVector, (app::Vector2 _vector));
    IL2CPP_REGISTER_METHOD(0x01829D60, Angle, betweenDirections, (app::Vector2 _from_normalized, app::Vector2 _to_normalized));
    IL2CPP_REGISTER_METHOD(0x01829E90, Angle, betweenVectors, (app::Vector2 _from, app::Vector2 _to));
    IL2CPP_REGISTER_METHOD(0x0182A090, Angle, operator___1, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A0B0, Angle, operator___2, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A0D0, Angle, operator___3, (app::Angle _a, float _b));
    IL2CPP_REGISTER_METHOD(0x0182A0E0, Angle, operator___4, (float _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A0F0, Angle, operator___5, (app::Angle _a, float _b));
    IL2CPP_REGISTER_METHOD(0x0182A100, Angle, operator___6, (float _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A110, Angle, operator___7, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A130, float, operator___8, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A140, Angle, operator___9, (app::Angle _a));
    IL2CPP_REGISTER_METHOD(0x0182A150, bool, operator___10, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A160, bool, operator___11, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A170, bool, operator____1, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A180, bool, operator____2, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A190, bool, operator____3, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0182A1B0, bool, operator____4, (app::Angle _a, app::Angle _b));
    IL2CPP_REGISTER_METHOD(0x0014A390, bool, Equals_1, (app::Angle__Boxed * this_ptr, app::Angle _other));
    IL2CPP_REGISTER_METHOD(0x0014A3E0, bool, Equals_2, (app::Angle__Boxed * this_ptr, app::Object* _obj));
    IL2CPP_REGISTER_METHOD(0x0014A500, int32_t, GetHashCode, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A520, bool, approx, (app::Angle__Boxed * this_ptr, app::Angle _other, float _epsilon_rad));
    IL2CPP_REGISTER_METHOD(0x0182A1D0, Angle, getShortestDelta, (app::Angle _from, app::Angle _to));
    IL2CPP_REGISTER_METHOD(0x0182A320, Angle, lerp, (app::Angle _from, app::Angle _to, float _t));
    IL2CPP_REGISTER_METHOD(0x0182A400, float, inverseLerp, (app::Angle _from, app::Angle _to, app::Angle _value));
    IL2CPP_REGISTER_METHOD(0x0014A540, void, wrap, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A550, void, wrap2Pi, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A600, Angle, get_wrapped, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A6B0, Angle, get_wrapped2Pi, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A760, bool, get_isWrapped, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A780, bool, get_isWrapped2Pi, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A7A0, Vector2, toDirection_1, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A870, Vector3, toDirection_2, (app::Angle__Boxed * this_ptr, app::Vector3 _axis));
    IL2CPP_REGISTER_METHOD(0x0014A8C0, Quaternion, toQuaternion_1, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014A9A0, Quaternion, toQuaternion_2, (app::Angle__Boxed * this_ptr, app::Vector3 _axis));
    IL2CPP_REGISTER_METHOD(0x0014AA90, String*, ToString_1, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014AAD0, String*, ToString_2, (app::Angle__Boxed * this_ptr, app::String* _format, app::IFormatProvider* _format_provider));
    IL2CPP_REGISTER_METHOD(0x0014AB10, float, arcLength, (app::Angle__Boxed * this_ptr, float _radius));
    IL2CPP_REGISTER_METHOD(0x0182A870, Angle, fromArcLength, (float _arc_length, float _radius));
    IL2CPP_REGISTER_METHOD(0x0014AB20, float, get_cos, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014ABD0, float, get_sin, (app::Angle__Boxed * this_ptr));
    IL2CPP_REGISTER_METHOD(0x0014AC80, void, clamp, (app::Angle__Boxed * this_ptr, app::Angle _min, app::Angle _max));
    IL2CPP_REGISTER_METHOD(0x0182A880, void, __cctor, ());
} // namespace app::methods::Swing::Angle
