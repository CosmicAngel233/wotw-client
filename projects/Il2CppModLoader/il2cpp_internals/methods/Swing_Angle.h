#include <interception_macros.h>

namespace app::methods::Swing::Angle {
IL2CPP_REGISTER_METHOD(0x0010FDD0, float, get_rad, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x00114F30, void, set_rad, (Angle__Boxed * __this, float value));
IL2CPP_REGISTER_METHOD(0x0014A2A0, float, get_deg, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A2B0, void, set_deg, (Angle__Boxed * __this, float value));
IL2CPP_REGISTER_METHOD(0x00114F30, void, __ctor, (Angle__Boxed * __this, float _radians));
IL2CPP_REGISTER_METHOD(0x0014A2C0, void, __ctor, (Angle__Boxed * __this, float _degreesOrRadians, bool _degrees));
IL2CPP_REGISTER_METHOD(0x0014A2E0, void, __ctor, (Angle__Boxed * __this, Vector2 _normalizedDir));
IL2CPP_REGISTER_METHOD(0x01829BE0, Angle, fromRadians, (float _radians));
IL2CPP_REGISTER_METHOD(0x01829BF0, Angle, fromDegrees, (float _degrees));
IL2CPP_REGISTER_METHOD(0x01829C00, Angle, fromDirection, (Vector2 _normalizedDir));
IL2CPP_REGISTER_METHOD(0x01829CB0, Angle, fromVector, (Vector2 _vector));
IL2CPP_REGISTER_METHOD(0x01829D60, Angle, betweenDirections, (Vector2 _fromNormalized, Vector2 _toNormalized));
IL2CPP_REGISTER_METHOD(0x01829E90, Angle, betweenVectors, (Vector2 _from, Vector2 _to));
IL2CPP_REGISTER_METHOD(0x0182A090, Angle, operator__, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A0B0, Angle, operator__, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A0D0, Angle, operator__, (Angle _a, float _b));
IL2CPP_REGISTER_METHOD(0x0182A0E0, Angle, operator__, (float _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A0F0, Angle, operator__, (Angle _a, float _b));
IL2CPP_REGISTER_METHOD(0x0182A100, Angle, operator__, (float _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A110, Angle, operator__, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A130, float, operator__, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A140, Angle, operator__, (Angle _a));
IL2CPP_REGISTER_METHOD(0x0182A150, bool, operator__, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A160, bool, operator__, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A170, bool, operator___, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A180, bool, operator___, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A190, bool, operator___, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0182A1B0, bool, operator___, (Angle _a, Angle _b));
IL2CPP_REGISTER_METHOD(0x0014A390, bool, Equals, (Angle__Boxed * __this, Angle _other));
IL2CPP_REGISTER_METHOD(0x0014A3E0, bool, Equals, (Angle__Boxed * __this, Object * _obj));
IL2CPP_REGISTER_METHOD(0x0014A500, int32_t, GetHashCode, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A520, bool, approx, (Angle__Boxed * __this, Angle _other, float _epsilonRad));
IL2CPP_REGISTER_METHOD(0x0182A1D0, Angle, getShortestDelta, (Angle _from, Angle _to));
IL2CPP_REGISTER_METHOD(0x0182A320, Angle, lerp, (Angle _from, Angle _to, float _t));
IL2CPP_REGISTER_METHOD(0x0182A400, float, inverseLerp, (Angle _from, Angle _to, Angle _value));
IL2CPP_REGISTER_METHOD(0x0014A540, void, wrap, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A550, void, wrap2Pi, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A600, Angle, get_wrapped, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A6B0, Angle, get_wrapped2Pi, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A760, bool, get_isWrapped, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A780, bool, get_isWrapped2Pi, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A7A0, Vector2, toDirection, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A870, Vector3, toDirection, (Angle__Boxed * __this, Vector3 _axis));
IL2CPP_REGISTER_METHOD(0x0014A8C0, Quaternion, toQuaternion, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014A9A0, Quaternion, toQuaternion, (Angle__Boxed * __this, Vector3 _axis));
IL2CPP_REGISTER_METHOD(0x0014AA90, String *, ToString, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014AAD0, String *, ToString, (Angle__Boxed * __this, String * _format, IFormatProvider * _formatProvider));
IL2CPP_REGISTER_METHOD(0x0014AB10, float, arcLength, (Angle__Boxed * __this, float _radius));
IL2CPP_REGISTER_METHOD(0x0182A870, Angle, fromArcLength, (float _arcLength, float _radius));
IL2CPP_REGISTER_METHOD(0x0014AB20, float, get_cos, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014ABD0, float, get_sin, (Angle__Boxed * __this));
IL2CPP_REGISTER_METHOD(0x0014AC80, void, clamp, (Angle__Boxed * __this, Angle _min, Angle _max));
IL2CPP_REGISTER_METHOD(0x0182A880, void, __cctor, ());
}
